# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import mediasdk.grpc_mock as grpc

from . import domain_group_pb2 as domain__group__pb2


class DomainGroupStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDomainGroup = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/CreateDomainGroup',
                request_serializer=domain__group__pb2.CreateDomainGroupRequest.SerializeToString,
                response_deserializer=domain__group__pb2.CreateDomainGroupResponse.FromString,
                )
        self.DescribeDomainGroups = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/DescribeDomainGroups',
                request_serializer=domain__group__pb2.DescribeDomainGroupsRequest.SerializeToString,
                response_deserializer=domain__group__pb2.DescribeDomainGroupsResponse.FromString,
                )
        self.DescribeDomainGroupDetails = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/DescribeDomainGroupDetails',
                request_serializer=domain__group__pb2.DescribeDomainGroupDetailsRequest.SerializeToString,
                response_deserializer=domain__group__pb2.DescribeDomainGroupDetailsResponse.FromString,
                )
        self.AddMediasToDomainGroups = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/AddMediasToDomainGroups',
                request_serializer=domain__group__pb2.AddMediasToDomainGroupsRequest.SerializeToString,
                response_deserializer=domain__group__pb2.AddMediasToDomainGroupsResponse.FromString,
                )
        self.RemoveMediasFromDomainGroups = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/RemoveMediasFromDomainGroups',
                request_serializer=domain__group__pb2.RemoveMediasFromDomainGroupsRequest.SerializeToString,
                response_deserializer=domain__group__pb2.RemoveMediasFromDomainGroupsResponse.FromString,
                )
        self.DeleteDomainGroups = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/DeleteDomainGroups',
                request_serializer=domain__group__pb2.DeleteDomainGroupsRequest.SerializeToString,
                response_deserializer=domain__group__pb2.DeleteDomainGroupsResponse.FromString,
                )
        self.ModifyDomainGroup = channel.unary_unary(
                '/trpc.media.domaingroup.DomainGroup/ModifyDomainGroup',
                request_serializer=domain__group__pb2.ModifyDomainGroupRequest.SerializeToString,
                response_deserializer=domain__group__pb2.ModifyDomainGroupResponse.FromString,
                )


class DomainGroupServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDomainGroup(self, request, context):
        """群组管理
        @alias=/CreateDomainGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeDomainGroups(self, request, context):
        """@alias=/DescribeDomainGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeDomainGroupDetails(self, request, context):
        """@alias=/DescribeDomainGroupDetails
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMediasToDomainGroups(self, request, context):
        """@alias=/AddMediasToDomainGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveMediasFromDomainGroups(self, request, context):
        """@alias=/RemoveMediasFromDomainGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDomainGroups(self, request, context):
        """@alias=/DeleteDomainGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyDomainGroup(self, request, context):
        """@alias=/ModifyDomainGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DomainGroupServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDomainGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDomainGroup,
                    request_deserializer=domain__group__pb2.CreateDomainGroupRequest.FromString,
                    response_serializer=domain__group__pb2.CreateDomainGroupResponse.SerializeToString,
            ),
            'DescribeDomainGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeDomainGroups,
                    request_deserializer=domain__group__pb2.DescribeDomainGroupsRequest.FromString,
                    response_serializer=domain__group__pb2.DescribeDomainGroupsResponse.SerializeToString,
            ),
            'DescribeDomainGroupDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeDomainGroupDetails,
                    request_deserializer=domain__group__pb2.DescribeDomainGroupDetailsRequest.FromString,
                    response_serializer=domain__group__pb2.DescribeDomainGroupDetailsResponse.SerializeToString,
            ),
            'AddMediasToDomainGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMediasToDomainGroups,
                    request_deserializer=domain__group__pb2.AddMediasToDomainGroupsRequest.FromString,
                    response_serializer=domain__group__pb2.AddMediasToDomainGroupsResponse.SerializeToString,
            ),
            'RemoveMediasFromDomainGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveMediasFromDomainGroups,
                    request_deserializer=domain__group__pb2.RemoveMediasFromDomainGroupsRequest.FromString,
                    response_serializer=domain__group__pb2.RemoveMediasFromDomainGroupsResponse.SerializeToString,
            ),
            'DeleteDomainGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDomainGroups,
                    request_deserializer=domain__group__pb2.DeleteDomainGroupsRequest.FromString,
                    response_serializer=domain__group__pb2.DeleteDomainGroupsResponse.SerializeToString,
            ),
            'ModifyDomainGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyDomainGroup,
                    request_deserializer=domain__group__pb2.ModifyDomainGroupRequest.FromString,
                    response_serializer=domain__group__pb2.ModifyDomainGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trpc.media.domaingroup.DomainGroup', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DomainGroup(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDomainGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/CreateDomainGroup',
            domain__group__pb2.CreateDomainGroupRequest.SerializeToString,
            domain__group__pb2.CreateDomainGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeDomainGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/DescribeDomainGroups',
            domain__group__pb2.DescribeDomainGroupsRequest.SerializeToString,
            domain__group__pb2.DescribeDomainGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeDomainGroupDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/DescribeDomainGroupDetails',
            domain__group__pb2.DescribeDomainGroupDetailsRequest.SerializeToString,
            domain__group__pb2.DescribeDomainGroupDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMediasToDomainGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/AddMediasToDomainGroups',
            domain__group__pb2.AddMediasToDomainGroupsRequest.SerializeToString,
            domain__group__pb2.AddMediasToDomainGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveMediasFromDomainGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/RemoveMediasFromDomainGroups',
            domain__group__pb2.RemoveMediasFromDomainGroupsRequest.SerializeToString,
            domain__group__pb2.RemoveMediasFromDomainGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDomainGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/DeleteDomainGroups',
            domain__group__pb2.DeleteDomainGroupsRequest.SerializeToString,
            domain__group__pb2.DeleteDomainGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyDomainGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.domaingroup.DomainGroup/ModifyDomainGroup',
            domain__group__pb2.ModifyDomainGroupRequest.SerializeToString,
            domain__group__pb2.ModifyDomainGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
