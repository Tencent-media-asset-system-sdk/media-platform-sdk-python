# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import mediasdk.grpc_mock as grpc

from . import video_structure_pb2 as video__structure__pb2


class AITagStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAITagTask = channel.unary_unary(
                '/trpc.media.videostructure.AITag/CreateAITagTask',
                request_serializer=video__structure__pb2.CreateVideoStructureTaskRequest.SerializeToString,
                response_deserializer=video__structure__pb2.CreateVideoStructureTaskResponse.FromString,
                )
        self.DescribeAITagTaskData = channel.unary_unary(
                '/trpc.media.videostructure.AITag/DescribeAITagTaskData',
                request_serializer=video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeAITagTaskDataResponse.FromString,
                )
        self.DescribeAITagAudioTaskData = channel.unary_unary(
                '/trpc.media.videostructure.AITag/DescribeAITagAudioTaskData',
                request_serializer=video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeAITagAudioTaskDataResponse.FromString,
                )
        self.DescribeAITagImageTaskData = channel.unary_unary(
                '/trpc.media.videostructure.AITag/DescribeAITagImageTaskData',
                request_serializer=video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeAITagImageTaskDataResponse.FromString,
                )
        self.DescribeAITagTextTaskData = channel.unary_unary(
                '/trpc.media.videostructure.AITag/DescribeAITagTextTaskData',
                request_serializer=video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeAITagTextTaskDataResponse.FromString,
                )
        self.DescribeVideoShotCover = channel.unary_unary(
                '/trpc.media.videostructure.AITag/DescribeVideoShotCover',
                request_serializer=video__structure__pb2.DescribeVideoShotCoverRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeVideoShotCoverResponse.FromString,
                )


class AITagServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAITagTask(self, request, context):
        """@alias=/CreateAITagTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAITagTaskData(self, request, context):
        """@alias=/DescribeAITagTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAITagAudioTaskData(self, request, context):
        """@alias=/DescribeAITagAudioTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAITagImageTaskData(self, request, context):
        """@alias=/DescribeAITagImageTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAITagTextTaskData(self, request, context):
        """@alias=/DescribeAITagTextTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeVideoShotCover(self, request, context):
        """@alias=/DescribeVideoShotCover
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AITagServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAITagTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAITagTask,
                    request_deserializer=video__structure__pb2.CreateVideoStructureTaskRequest.FromString,
                    response_serializer=video__structure__pb2.CreateVideoStructureTaskResponse.SerializeToString,
            ),
            'DescribeAITagTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAITagTaskData,
                    request_deserializer=video__structure__pb2.DescribeAITagTaskDataRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeAITagTaskDataResponse.SerializeToString,
            ),
            'DescribeAITagAudioTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAITagAudioTaskData,
                    request_deserializer=video__structure__pb2.DescribeAITagTaskDataRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeAITagAudioTaskDataResponse.SerializeToString,
            ),
            'DescribeAITagImageTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAITagImageTaskData,
                    request_deserializer=video__structure__pb2.DescribeAITagTaskDataRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeAITagImageTaskDataResponse.SerializeToString,
            ),
            'DescribeAITagTextTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAITagTextTaskData,
                    request_deserializer=video__structure__pb2.DescribeAITagTaskDataRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeAITagTextTaskDataResponse.SerializeToString,
            ),
            'DescribeVideoShotCover': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeVideoShotCover,
                    request_deserializer=video__structure__pb2.DescribeVideoShotCoverRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeVideoShotCoverResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trpc.media.videostructure.AITag', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AITag(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAITagTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AITag/CreateAITagTask',
            video__structure__pb2.CreateVideoStructureTaskRequest.SerializeToString,
            video__structure__pb2.CreateVideoStructureTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAITagTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AITag/DescribeAITagTaskData',
            video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
            video__structure__pb2.DescribeAITagTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAITagAudioTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AITag/DescribeAITagAudioTaskData',
            video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
            video__structure__pb2.DescribeAITagAudioTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAITagImageTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AITag/DescribeAITagImageTaskData',
            video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
            video__structure__pb2.DescribeAITagImageTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAITagTextTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AITag/DescribeAITagTextTaskData',
            video__structure__pb2.DescribeAITagTaskDataRequest.SerializeToString,
            video__structure__pb2.DescribeAITagTextTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeVideoShotCover(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AITag/DescribeVideoShotCover',
            video__structure__pb2.DescribeVideoShotCoverRequest.SerializeToString,
            video__structure__pb2.DescribeVideoShotCoverResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AICatalogStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAICatalogTask = channel.unary_unary(
                '/trpc.media.videostructure.AICatalog/CreateAICatalogTask',
                request_serializer=video__structure__pb2.CreateVideoStructureTaskRequest.SerializeToString,
                response_deserializer=video__structure__pb2.CreateVideoStructureTaskResponse.FromString,
                )
        self.DescribeAICatalogTaskData = channel.unary_unary(
                '/trpc.media.videostructure.AICatalog/DescribeAICatalogTaskData',
                request_serializer=video__structure__pb2.DescribeAICatalogTaskDataRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeAICatalogTaskDataResponse.FromString,
                )


class AICatalogServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAICatalogTask(self, request, context):
        """@alias=/CreateAICatalogTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAICatalogTaskData(self, request, context):
        """@alias=/DescribeAICatalogTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AICatalogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAICatalogTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAICatalogTask,
                    request_deserializer=video__structure__pb2.CreateVideoStructureTaskRequest.FromString,
                    response_serializer=video__structure__pb2.CreateVideoStructureTaskResponse.SerializeToString,
            ),
            'DescribeAICatalogTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAICatalogTaskData,
                    request_deserializer=video__structure__pb2.DescribeAICatalogTaskDataRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeAICatalogTaskDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trpc.media.videostructure.AICatalog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AICatalog(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAICatalogTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AICatalog/CreateAICatalogTask',
            video__structure__pb2.CreateVideoStructureTaskRequest.SerializeToString,
            video__structure__pb2.CreateVideoStructureTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAICatalogTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AICatalog/DescribeAICatalogTaskData',
            video__structure__pb2.DescribeAICatalogTaskDataRequest.SerializeToString,
            video__structure__pb2.DescribeAICatalogTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AICutStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAICutTask = channel.unary_unary(
                '/trpc.media.videostructure.AICut/CreateAICutTask',
                request_serializer=video__structure__pb2.CreateVideoStructureTaskRequest.SerializeToString,
                response_deserializer=video__structure__pb2.CreateVideoStructureTaskResponse.FromString,
                )
        self.DescribeAICutTaskData = channel.unary_unary(
                '/trpc.media.videostructure.AICut/DescribeAICutTaskData',
                request_serializer=video__structure__pb2.DescribeAICutTaskDataRequest.SerializeToString,
                response_deserializer=video__structure__pb2.DescribeAICutTaskDataResponse.FromString,
                )


class AICutServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAICutTask(self, request, context):
        """@alias=/CreateAICutTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAICutTaskData(self, request, context):
        """@alias=/DescribeAICutTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AICutServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAICutTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAICutTask,
                    request_deserializer=video__structure__pb2.CreateVideoStructureTaskRequest.FromString,
                    response_serializer=video__structure__pb2.CreateVideoStructureTaskResponse.SerializeToString,
            ),
            'DescribeAICutTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAICutTaskData,
                    request_deserializer=video__structure__pb2.DescribeAICutTaskDataRequest.FromString,
                    response_serializer=video__structure__pb2.DescribeAICutTaskDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trpc.media.videostructure.AICut', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AICut(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAICutTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AICut/CreateAICutTask',
            video__structure__pb2.CreateVideoStructureTaskRequest.SerializeToString,
            video__structure__pb2.CreateVideoStructureTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAICutTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.videostructure.AICut/DescribeAICutTaskData',
            video__structure__pb2.DescribeAICutTaskDataRequest.SerializeToString,
            video__structure__pb2.DescribeAICutTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
