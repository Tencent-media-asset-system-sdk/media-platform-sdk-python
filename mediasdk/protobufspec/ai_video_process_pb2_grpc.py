# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc_mock as grpc

from . import ai_video_process_pb2 as ai__video__process__pb2


class AIVideoProcessStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAIVideoProcessTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/CreateAIVideoProcessTask',
                request_serializer=ai__video__process__pb2.CreateAIVideoProcessTaskRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.CreateAIVideoProcessResponse.FromString,
                )
        self.DescribeAIVideoProcessDetail = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/DescribeAIVideoProcessDetail',
                request_serializer=ai__video__process__pb2.DescribeAIVideoProcessDetailRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.DescribeAIVideoProcessDetailResponse.FromString,
                )
        self.DescribeAIVideoProcessTasks = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/DescribeAIVideoProcessTasks',
                request_serializer=ai__video__process__pb2.DescribeAIVideoProcessTasksRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.DescribeAIVideoProcessTasksResponse.FromString,
                )
        self.UpdateAIVideoProcessTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/UpdateAIVideoProcessTask',
                request_serializer=ai__video__process__pb2.UpdateAIVideoProcessTaskRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.UpdateAIVideoProcessResponse.FromString,
                )
        self.DescribeAIVideoProcessConfig = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/DescribeAIVideoProcessConfig',
                request_serializer=ai__video__process__pb2.DescribeAIVideoProcessConfigRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.DescribeAIVideoProcessConfigResponse.FromString,
                )
        self.CreateVideoCropTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/CreateVideoCropTask',
                request_serializer=ai__video__process__pb2.CreateAIVideoProcessTaskRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.CreateAIVideoProcessResponse.FromString,
                )
        self.UpdateVideoCropTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/UpdateVideoCropTask',
                request_serializer=ai__video__process__pb2.UpdateAIVideoProcessTaskRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.UpdateAIVideoProcessResponse.FromString,
                )
        self.CreateM3UIndexTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/CreateM3UIndexTask',
                request_serializer=ai__video__process__pb2.CreateM3UIndexTaskRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.CreateM3UIndexTaskResponse.FromString,
                )
        self.DescribeM3UIndexDetail = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/DescribeM3UIndexDetail',
                request_serializer=ai__video__process__pb2.DescribeM3UIndexDetailRequest.SerializeToString,
                response_deserializer=ai__video__process__pb2.DescribeM3UIndexDetailResponse.FromString,
                )
        self.StopAIVideoProcessTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/StopAIVideoProcessTask',
                request_serializer=ai__video__process__pb2.StopAIVideoProcessTaskReq.SerializeToString,
                response_deserializer=ai__video__process__pb2.StopAIVideoProcessTaskRsp.FromString,
                )
        self.RemoveAIVideoProcessTask = channel.unary_unary(
                '/trpc.media.aivideoprocess.AIVideoProcess/RemoveAIVideoProcessTask',
                request_serializer=ai__video__process__pb2.RemoveAIVideoProcessTaskReq.SerializeToString,
                response_deserializer=ai__video__process__pb2.RemoveAIVideoProcessTaskRsp.FromString,
                )


class AIVideoProcessServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAIVideoProcessTask(self, request, context):
        """创建AI视频处理任务
        @alias=/CreateAIVideoProcessTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAIVideoProcessDetail(self, request, context):
        """获取任务详情
        @alias=/DescribeAIVideoProcessDetail
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAIVideoProcessTasks(self, request, context):
        """获取任务列表 (TODO: 前端切换调用后清理接口)
        NOTICE: deprecated, use DescribeTasks instead
        @alias=/DescribeAIVideoProcessTasks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAIVideoProcessTask(self, request, context):
        """更新AI视频处理任务
        @alias=/UpdateAIVideoProcessTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAIVideoProcessConfig(self, request, context):
        """获取视频处理配置
        @alias=/DescribeAIVideoProcessConfig
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVideoCropTask(self, request, context):
        """创建横竖屏任务 (NOTICE: 已合并到CreateAIVideoProcessTask)
        NOTICE: deprecated, use CreateAIVideoProcessTask instead
        @alias=/CreateVideoCropTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateVideoCropTask(self, request, context):
        """更新横竖屏任务 (NOTICE: 已合并到UpdateAIVideoProcessTask)
        NOTICE: deprecated, use UpdateAIVideoProcessTask instead
        @alias=/UpdateVideoCropTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateM3UIndexTask(self, request, context):
        """创建M3U Index任务
        @alias=/CreateM3UIndexTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeM3UIndexDetail(self, request, context):
        """获取M3U Index任务详情
        @alias=/DescribeM3UIndexDetail
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAIVideoProcessTask(self, request, context):
        """停止任务，内部使用对外不暴露
        @alias=/StopAIVideoProcessTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveAIVideoProcessTask(self, request, context):
        """删除任务，内部使用对外不暴露
        @alias=/RemoveAIVideoProcessTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIVideoProcessServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAIVideoProcessTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAIVideoProcessTask,
                    request_deserializer=ai__video__process__pb2.CreateAIVideoProcessTaskRequest.FromString,
                    response_serializer=ai__video__process__pb2.CreateAIVideoProcessResponse.SerializeToString,
            ),
            'DescribeAIVideoProcessDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAIVideoProcessDetail,
                    request_deserializer=ai__video__process__pb2.DescribeAIVideoProcessDetailRequest.FromString,
                    response_serializer=ai__video__process__pb2.DescribeAIVideoProcessDetailResponse.SerializeToString,
            ),
            'DescribeAIVideoProcessTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAIVideoProcessTasks,
                    request_deserializer=ai__video__process__pb2.DescribeAIVideoProcessTasksRequest.FromString,
                    response_serializer=ai__video__process__pb2.DescribeAIVideoProcessTasksResponse.SerializeToString,
            ),
            'UpdateAIVideoProcessTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAIVideoProcessTask,
                    request_deserializer=ai__video__process__pb2.UpdateAIVideoProcessTaskRequest.FromString,
                    response_serializer=ai__video__process__pb2.UpdateAIVideoProcessResponse.SerializeToString,
            ),
            'DescribeAIVideoProcessConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAIVideoProcessConfig,
                    request_deserializer=ai__video__process__pb2.DescribeAIVideoProcessConfigRequest.FromString,
                    response_serializer=ai__video__process__pb2.DescribeAIVideoProcessConfigResponse.SerializeToString,
            ),
            'CreateVideoCropTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVideoCropTask,
                    request_deserializer=ai__video__process__pb2.CreateAIVideoProcessTaskRequest.FromString,
                    response_serializer=ai__video__process__pb2.CreateAIVideoProcessResponse.SerializeToString,
            ),
            'UpdateVideoCropTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateVideoCropTask,
                    request_deserializer=ai__video__process__pb2.UpdateAIVideoProcessTaskRequest.FromString,
                    response_serializer=ai__video__process__pb2.UpdateAIVideoProcessResponse.SerializeToString,
            ),
            'CreateM3UIndexTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateM3UIndexTask,
                    request_deserializer=ai__video__process__pb2.CreateM3UIndexTaskRequest.FromString,
                    response_serializer=ai__video__process__pb2.CreateM3UIndexTaskResponse.SerializeToString,
            ),
            'DescribeM3UIndexDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeM3UIndexDetail,
                    request_deserializer=ai__video__process__pb2.DescribeM3UIndexDetailRequest.FromString,
                    response_serializer=ai__video__process__pb2.DescribeM3UIndexDetailResponse.SerializeToString,
            ),
            'StopAIVideoProcessTask': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAIVideoProcessTask,
                    request_deserializer=ai__video__process__pb2.StopAIVideoProcessTaskReq.FromString,
                    response_serializer=ai__video__process__pb2.StopAIVideoProcessTaskRsp.SerializeToString,
            ),
            'RemoveAIVideoProcessTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveAIVideoProcessTask,
                    request_deserializer=ai__video__process__pb2.RemoveAIVideoProcessTaskReq.FromString,
                    response_serializer=ai__video__process__pb2.RemoveAIVideoProcessTaskRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trpc.media.aivideoprocess.AIVideoProcess', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AIVideoProcess(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAIVideoProcessTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/CreateAIVideoProcessTask',
            ai__video__process__pb2.CreateAIVideoProcessTaskRequest.SerializeToString,
            ai__video__process__pb2.CreateAIVideoProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAIVideoProcessDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/DescribeAIVideoProcessDetail',
            ai__video__process__pb2.DescribeAIVideoProcessDetailRequest.SerializeToString,
            ai__video__process__pb2.DescribeAIVideoProcessDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAIVideoProcessTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/DescribeAIVideoProcessTasks',
            ai__video__process__pb2.DescribeAIVideoProcessTasksRequest.SerializeToString,
            ai__video__process__pb2.DescribeAIVideoProcessTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAIVideoProcessTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/UpdateAIVideoProcessTask',
            ai__video__process__pb2.UpdateAIVideoProcessTaskRequest.SerializeToString,
            ai__video__process__pb2.UpdateAIVideoProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAIVideoProcessConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/DescribeAIVideoProcessConfig',
            ai__video__process__pb2.DescribeAIVideoProcessConfigRequest.SerializeToString,
            ai__video__process__pb2.DescribeAIVideoProcessConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVideoCropTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/CreateVideoCropTask',
            ai__video__process__pb2.CreateAIVideoProcessTaskRequest.SerializeToString,
            ai__video__process__pb2.CreateAIVideoProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateVideoCropTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/UpdateVideoCropTask',
            ai__video__process__pb2.UpdateAIVideoProcessTaskRequest.SerializeToString,
            ai__video__process__pb2.UpdateAIVideoProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateM3UIndexTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/CreateM3UIndexTask',
            ai__video__process__pb2.CreateM3UIndexTaskRequest.SerializeToString,
            ai__video__process__pb2.CreateM3UIndexTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeM3UIndexDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/DescribeM3UIndexDetail',
            ai__video__process__pb2.DescribeM3UIndexDetailRequest.SerializeToString,
            ai__video__process__pb2.DescribeM3UIndexDetailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopAIVideoProcessTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/StopAIVideoProcessTask',
            ai__video__process__pb2.StopAIVideoProcessTaskReq.SerializeToString,
            ai__video__process__pb2.StopAIVideoProcessTaskRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveAIVideoProcessTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aivideoprocess.AIVideoProcess/RemoveAIVideoProcessTask',
            ai__video__process__pb2.RemoveAIVideoProcessTaskReq.SerializeToString,
            ai__video__process__pb2.RemoveAIVideoProcessTaskRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
