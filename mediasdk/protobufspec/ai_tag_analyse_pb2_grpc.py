# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc_mock as grpc

from . import ai_tag_analyse_pb2 as ai__tag__analyse__pb2


class AiTagAnalyseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DescribeL1L2Labels = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeL1L2Labels',
                request_serializer=ai__tag__analyse__pb2.CommonRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.DescribeL1L2LabelsResponse.FromString,
                )
        self.CreateTag = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/CreateTag',
                request_serializer=ai__tag__analyse__pb2.CreateTagRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.CreateTagResponse.FromString,
                )
        self.ImportTag = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/ImportTag',
                request_serializer=ai__tag__analyse__pb2.ImportTagRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.ImportTagResponse.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/DeleteTag',
                request_serializer=ai__tag__analyse__pb2.DeleteTagRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.DeleteTagResponse.FromString,
                )
        self.ModifyTag = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/ModifyTag',
                request_serializer=ai__tag__analyse__pb2.ModifyTagRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.ModifyTagResponse.FromString,
                )
        self.DescribeTags = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTags',
                request_serializer=ai__tag__analyse__pb2.DescribeTagsRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.DescribeTagsResponse.FromString,
                )
        self.CreateTagAnalysisTask = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/CreateTagAnalysisTask',
                request_serializer=ai__tag__analyse__pb2.CreateTagAnalysisTaskRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.CreateTagAnalysisTaskResponse.FromString,
                )
        self.DescribeTagAnalysisTaskData = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTagAnalysisTaskData',
                request_serializer=ai__tag__analyse__pb2.DescribeTagAnalysisTaskDataRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.DescribeTagAnalysisTaskDataResponse.FromString,
                )
        self.DescribeTagFiles = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTagFiles',
                request_serializer=ai__tag__analyse__pb2.DescribeTagFilesRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.DescribeTagFilesResponse.FromString,
                )
        self.DeleteTagFiles = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/DeleteTagFiles',
                request_serializer=ai__tag__analyse__pb2.DeleteTagFilesRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.DeleteTagFilesResponse.FromString,
                )
        self.GetTagFileUrl = channel.unary_unary(
                '/trpc.media.aitaganalyse.AiTagAnalyse/GetTagFileUrl',
                request_serializer=ai__tag__analyse__pb2.TagFileUrlRequest.SerializeToString,
                response_deserializer=ai__tag__analyse__pb2.TagFileUrlResponse.FromString,
                )


class AiTagAnalyseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DescribeL1L2Labels(self, request, context):
        """@alias=/DescribeL1L2Labels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTag(self, request, context):
        """@alias=/CreateTag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportTag(self, request, context):
        """@alias=/ImportTag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """@alias=/DeleteTag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyTag(self, request, context):
        """@alias=/ModifyTag
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeTags(self, request, context):
        """@alias=/DescribeTags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTagAnalysisTask(self, request, context):
        """@alias=/CreateTagAnalysisTask
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeTagAnalysisTaskData(self, request, context):
        """@alias=/DescribeTagAnalysisTaskData
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeTagFiles(self, request, context):
        """@alias=/DescribeTagFiles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTagFiles(self, request, context):
        """@alias=/DeleteTagFiles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTagFileUrl(self, request, context):
        """@alias=/GetTagFileUrl
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AiTagAnalyseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DescribeL1L2Labels': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeL1L2Labels,
                    request_deserializer=ai__tag__analyse__pb2.CommonRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.DescribeL1L2LabelsResponse.SerializeToString,
            ),
            'CreateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTag,
                    request_deserializer=ai__tag__analyse__pb2.CreateTagRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.CreateTagResponse.SerializeToString,
            ),
            'ImportTag': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportTag,
                    request_deserializer=ai__tag__analyse__pb2.ImportTagRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.ImportTagResponse.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=ai__tag__analyse__pb2.DeleteTagRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.DeleteTagResponse.SerializeToString,
            ),
            'ModifyTag': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyTag,
                    request_deserializer=ai__tag__analyse__pb2.ModifyTagRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.ModifyTagResponse.SerializeToString,
            ),
            'DescribeTags': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeTags,
                    request_deserializer=ai__tag__analyse__pb2.DescribeTagsRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.DescribeTagsResponse.SerializeToString,
            ),
            'CreateTagAnalysisTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTagAnalysisTask,
                    request_deserializer=ai__tag__analyse__pb2.CreateTagAnalysisTaskRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.CreateTagAnalysisTaskResponse.SerializeToString,
            ),
            'DescribeTagAnalysisTaskData': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeTagAnalysisTaskData,
                    request_deserializer=ai__tag__analyse__pb2.DescribeTagAnalysisTaskDataRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.DescribeTagAnalysisTaskDataResponse.SerializeToString,
            ),
            'DescribeTagFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeTagFiles,
                    request_deserializer=ai__tag__analyse__pb2.DescribeTagFilesRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.DescribeTagFilesResponse.SerializeToString,
            ),
            'DeleteTagFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTagFiles,
                    request_deserializer=ai__tag__analyse__pb2.DeleteTagFilesRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.DeleteTagFilesResponse.SerializeToString,
            ),
            'GetTagFileUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTagFileUrl,
                    request_deserializer=ai__tag__analyse__pb2.TagFileUrlRequest.FromString,
                    response_serializer=ai__tag__analyse__pb2.TagFileUrlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trpc.media.aitaganalyse.AiTagAnalyse', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AiTagAnalyse(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DescribeL1L2Labels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeL1L2Labels',
            ai__tag__analyse__pb2.CommonRequest.SerializeToString,
            ai__tag__analyse__pb2.DescribeL1L2LabelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/CreateTag',
            ai__tag__analyse__pb2.CreateTagRequest.SerializeToString,
            ai__tag__analyse__pb2.CreateTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/ImportTag',
            ai__tag__analyse__pb2.ImportTagRequest.SerializeToString,
            ai__tag__analyse__pb2.ImportTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/DeleteTag',
            ai__tag__analyse__pb2.DeleteTagRequest.SerializeToString,
            ai__tag__analyse__pb2.DeleteTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/ModifyTag',
            ai__tag__analyse__pb2.ModifyTagRequest.SerializeToString,
            ai__tag__analyse__pb2.ModifyTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTags',
            ai__tag__analyse__pb2.DescribeTagsRequest.SerializeToString,
            ai__tag__analyse__pb2.DescribeTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTagAnalysisTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/CreateTagAnalysisTask',
            ai__tag__analyse__pb2.CreateTagAnalysisTaskRequest.SerializeToString,
            ai__tag__analyse__pb2.CreateTagAnalysisTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeTagAnalysisTaskData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTagAnalysisTaskData',
            ai__tag__analyse__pb2.DescribeTagAnalysisTaskDataRequest.SerializeToString,
            ai__tag__analyse__pb2.DescribeTagAnalysisTaskDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeTagFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTagFiles',
            ai__tag__analyse__pb2.DescribeTagFilesRequest.SerializeToString,
            ai__tag__analyse__pb2.DescribeTagFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTagFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/DeleteTagFiles',
            ai__tag__analyse__pb2.DeleteTagFilesRequest.SerializeToString,
            ai__tag__analyse__pb2.DeleteTagFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTagFileUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trpc.media.aitaganalyse.AiTagAnalyse/GetTagFileUrl',
            ai__tag__analyse__pb2.TagFileUrlRequest.SerializeToString,
            ai__tag__analyse__pb2.TagFileUrlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
