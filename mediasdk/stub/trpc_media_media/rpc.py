# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: media.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# MediaService defines service
class MediaServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateMedias(self, ctx: context.Context, request: pb.CreateMediasRequest) -> pb.CreateMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CommitMedias(self, ctx: context.Context, request: pb.CommitMediasRequest) -> pb.CommitMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeMedias(self, ctx: context.Context, request: pb.DescribeMediasRequest) -> pb.DescribeMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeMediaDetails(self, ctx: context.Context, request: pb.DescribeMediaDetailsRequest) -> pb.DescribeMediaDetailsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteMedias(self, ctx: context.Context, request: pb.DeleteMediasRequest) -> pb.DeleteMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RestoreDeletedMedias(self, ctx: context.Context, request: pb.RestoreDeletedMediasRequest) -> pb.RestoreDeletedMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def EmptyTrash(self, ctx: context.Context, request: pb.EmptyTrashRequest) -> pb.EmptyTrashResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeCategories(self, ctx: context.Context, request: pb.DescribeCategoriesRequest) -> pb.DescribeCategoriesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ModifyMedia(self, ctx: context.Context, request: pb.ModifyMediaRequest) -> pb.ModifyMediaResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveRelevantTags(self, ctx: context.Context, request: pb.RetrieveRelevantTagsRequest) -> pb.RetrieveRelevantTagsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveLexicalEntry(self, ctx: context.Context, request: pb.RetrieveLexicalEntryRequest) -> pb.RetrieveLexicalEntryResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveTitleMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest) -> pb.RetrieveMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveContentMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest) -> pb.RetrieveMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveTextMultiModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest) -> pb.RetrieveMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveTextCrossModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest) -> pb.RetrieveMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveSimilarMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest) -> pb.RetrieveMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveFaces(self, ctx: context.Context, request: pb.RetrieveMediasRequest) -> pb.RetrieveFacesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RetrieveConsistentMedias(self, ctx: context.Context, request: pb.RetrieveConsistentMediasRequest) -> pb.RetrieveConsistentMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def AssociateWords(self, ctx: context.Context, request: pb.AssociateWordsRequest) -> pb.AssociateWordsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ExtractImages(self, ctx: context.Context, request: pb.ExtractImagesRequest) -> pb.ExtractImagesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateResourcePackage(self, ctx: context.Context, request: pb.CreateResourcePackageRequest) -> pb.CreateResourcePackageResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteResourcePackage(self, ctx: context.Context, request: pb.DeleteResourcePackageRequest) -> pb.ResourcePackageOperateResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UpdateResourcePackage(self, ctx: context.Context, request: pb.UpdateResourcePackageRequest) -> pb.ResourcePackageOperateResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeResourcePackage(self, ctx: context.Context, request: pb.DescribeResourcePackageRequest) -> pb.DescribePackageResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def AddResourceToPackage(self, ctx: context.Context, request: pb.AddResourceToPackageRequest) -> pb.AddResourceToPackageResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteResourceFromPackage(self, ctx: context.Context, request: pb.DeleteResourceFromPackageRequest) -> pb.ResourcePackageOperateResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UndeleteResourceFromPackage(self, ctx: context.Context, request: pb.UndeleteResourceFromPackageRequest) -> pb.ResourcePackageOperateResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def BindMedias(self, ctx: context.Context, request: pb.BindMediasRequest) -> pb.BindMediasResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeMediaDetailsInner(self, ctx: context.Context, request: pb.DescribeMediaDetailsInnerRequest) -> pb.DescribeMediaDetailsInnerResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

MediaServiceName = "trpc.media.media.Media"  # pylint: disable=invalid-name

# add MediaServicer to server
# pylint: disable=invalid-name
def register_MediaServicer_server(svr: server.Server, servicer: MediaServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateMedias",
            req_cls=pb.CreateMediasRequest,
            rsp_cls=pb.CreateMediasResponse,
            impl_func=servicer.CreateMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CommitMedias",
            req_cls=pb.CommitMediasRequest,
            rsp_cls=pb.CommitMediasResponse,
            impl_func=servicer.CommitMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeMedias",
            req_cls=pb.DescribeMediasRequest,
            rsp_cls=pb.DescribeMediasResponse,
            impl_func=servicer.DescribeMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeMediaDetails",
            req_cls=pb.DescribeMediaDetailsRequest,
            rsp_cls=pb.DescribeMediaDetailsResponse,
            impl_func=servicer.DescribeMediaDetails))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteMedias",
            req_cls=pb.DeleteMediasRequest,
            rsp_cls=pb.DeleteMediasResponse,
            impl_func=servicer.DeleteMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RestoreDeletedMedias",
            req_cls=pb.RestoreDeletedMediasRequest,
            rsp_cls=pb.RestoreDeletedMediasResponse,
            impl_func=servicer.RestoreDeletedMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/EmptyTrash",
            req_cls=pb.EmptyTrashRequest,
            rsp_cls=pb.EmptyTrashResponse,
            impl_func=servicer.EmptyTrash))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeCategories",
            req_cls=pb.DescribeCategoriesRequest,
            rsp_cls=pb.DescribeCategoriesResponse,
            impl_func=servicer.DescribeCategories))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ModifyMedia",
            req_cls=pb.ModifyMediaRequest,
            rsp_cls=pb.ModifyMediaResponse,
            impl_func=servicer.ModifyMedia))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveRelevantTags",
            req_cls=pb.RetrieveRelevantTagsRequest,
            rsp_cls=pb.RetrieveRelevantTagsResponse,
            impl_func=servicer.RetrieveRelevantTags))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveLexicalEntry",
            req_cls=pb.RetrieveLexicalEntryRequest,
            rsp_cls=pb.RetrieveLexicalEntryResponse,
            impl_func=servicer.RetrieveLexicalEntry))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveTitleMedias",
            req_cls=pb.RetrieveMediasRequest,
            rsp_cls=pb.RetrieveMediasResponse,
            impl_func=servicer.RetrieveTitleMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveContentMedias",
            req_cls=pb.RetrieveMediasRequest,
            rsp_cls=pb.RetrieveMediasResponse,
            impl_func=servicer.RetrieveContentMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveTextMultiModalMedias",
            req_cls=pb.RetrieveMediasRequest,
            rsp_cls=pb.RetrieveMediasResponse,
            impl_func=servicer.RetrieveTextMultiModalMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveTextCrossModalMedias",
            req_cls=pb.RetrieveMediasRequest,
            rsp_cls=pb.RetrieveMediasResponse,
            impl_func=servicer.RetrieveTextCrossModalMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveSimilarMedias",
            req_cls=pb.RetrieveMediasRequest,
            rsp_cls=pb.RetrieveMediasResponse,
            impl_func=servicer.RetrieveSimilarMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveFaces",
            req_cls=pb.RetrieveMediasRequest,
            rsp_cls=pb.RetrieveFacesResponse,
            impl_func=servicer.RetrieveFaces))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RetrieveConsistentMedias",
            req_cls=pb.RetrieveConsistentMediasRequest,
            rsp_cls=pb.RetrieveConsistentMediasResponse,
            impl_func=servicer.RetrieveConsistentMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/AssociateWords",
            req_cls=pb.AssociateWordsRequest,
            rsp_cls=pb.AssociateWordsResponse,
            impl_func=servicer.AssociateWords))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ExtractImages",
            req_cls=pb.ExtractImagesRequest,
            rsp_cls=pb.ExtractImagesResponse,
            impl_func=servicer.ExtractImages))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateResourcePackage",
            req_cls=pb.CreateResourcePackageRequest,
            rsp_cls=pb.CreateResourcePackageResponse,
            impl_func=servicer.CreateResourcePackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteResourcePackage",
            req_cls=pb.DeleteResourcePackageRequest,
            rsp_cls=pb.ResourcePackageOperateResponse,
            impl_func=servicer.DeleteResourcePackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UpdateResourcePackage",
            req_cls=pb.UpdateResourcePackageRequest,
            rsp_cls=pb.ResourcePackageOperateResponse,
            impl_func=servicer.UpdateResourcePackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeResourcePackage",
            req_cls=pb.DescribeResourcePackageRequest,
            rsp_cls=pb.DescribePackageResponse,
            impl_func=servicer.DescribeResourcePackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/AddResourceToPackage",
            req_cls=pb.AddResourceToPackageRequest,
            rsp_cls=pb.AddResourceToPackageResponse,
            impl_func=servicer.AddResourceToPackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteResourceFromPackage",
            req_cls=pb.DeleteResourceFromPackageRequest,
            rsp_cls=pb.ResourcePackageOperateResponse,
            impl_func=servicer.DeleteResourceFromPackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UndeleteResourceFromPackage",
            req_cls=pb.UndeleteResourceFromPackageRequest,
            rsp_cls=pb.ResourcePackageOperateResponse,
            impl_func=servicer.UndeleteResourceFromPackage))
    
    rpc_method_handlers.append(
        server.Method(
            name="/BindMedias",
            req_cls=pb.BindMediasRequest,
            rsp_cls=pb.BindMediasResponse,
            impl_func=servicer.BindMedias))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeMediaDetailsInner",
            req_cls=pb.DescribeMediaDetailsInnerRequest,
            rsp_cls=pb.DescribeMediaDetailsInnerResponse,
            impl_func=servicer.DescribeMediaDetailsInner))
    
    desc = server.ServiceDesc(
        service_name="/" + MediaServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class MediaClientProxy:
    """Client proxy"""
    
    def CreateMedias(self, ctx: context.Context, request: pb.CreateMediasRequest, options: List[Callable] = None) -> pb.CreateMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateMedias(self, ctx: context.Context, request: pb.CreateMediasRequest, options: List[Callable] = None) -> pb.CreateMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CommitMedias(self, ctx: context.Context, request: pb.CommitMediasRequest, options: List[Callable] = None) -> pb.CommitMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCommitMedias(self, ctx: context.Context, request: pb.CommitMediasRequest, options: List[Callable] = None) -> pb.CommitMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeMedias(self, ctx: context.Context, request: pb.DescribeMediasRequest, options: List[Callable] = None) -> pb.DescribeMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeMedias(self, ctx: context.Context, request: pb.DescribeMediasRequest, options: List[Callable] = None) -> pb.DescribeMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeMediaDetails(self, ctx: context.Context, request: pb.DescribeMediaDetailsRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeMediaDetails(self, ctx: context.Context, request: pb.DescribeMediaDetailsRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteMedias(self, ctx: context.Context, request: pb.DeleteMediasRequest, options: List[Callable] = None) -> pb.DeleteMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteMedias(self, ctx: context.Context, request: pb.DeleteMediasRequest, options: List[Callable] = None) -> pb.DeleteMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RestoreDeletedMedias(self, ctx: context.Context, request: pb.RestoreDeletedMediasRequest, options: List[Callable] = None) -> pb.RestoreDeletedMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRestoreDeletedMedias(self, ctx: context.Context, request: pb.RestoreDeletedMediasRequest, options: List[Callable] = None) -> pb.RestoreDeletedMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def EmptyTrash(self, ctx: context.Context, request: pb.EmptyTrashRequest, options: List[Callable] = None) -> pb.EmptyTrashResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncEmptyTrash(self, ctx: context.Context, request: pb.EmptyTrashRequest, options: List[Callable] = None) -> pb.EmptyTrashResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeCategories(self, ctx: context.Context, request: pb.DescribeCategoriesRequest, options: List[Callable] = None) -> pb.DescribeCategoriesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeCategories(self, ctx: context.Context, request: pb.DescribeCategoriesRequest, options: List[Callable] = None) -> pb.DescribeCategoriesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ModifyMedia(self, ctx: context.Context, request: pb.ModifyMediaRequest, options: List[Callable] = None) -> pb.ModifyMediaResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncModifyMedia(self, ctx: context.Context, request: pb.ModifyMediaRequest, options: List[Callable] = None) -> pb.ModifyMediaResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveRelevantTags(self, ctx: context.Context, request: pb.RetrieveRelevantTagsRequest, options: List[Callable] = None) -> pb.RetrieveRelevantTagsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveRelevantTags(self, ctx: context.Context, request: pb.RetrieveRelevantTagsRequest, options: List[Callable] = None) -> pb.RetrieveRelevantTagsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveLexicalEntry(self, ctx: context.Context, request: pb.RetrieveLexicalEntryRequest, options: List[Callable] = None) -> pb.RetrieveLexicalEntryResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveLexicalEntry(self, ctx: context.Context, request: pb.RetrieveLexicalEntryRequest, options: List[Callable] = None) -> pb.RetrieveLexicalEntryResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveTitleMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveTitleMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveContentMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveContentMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveTextMultiModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveTextMultiModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveTextCrossModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveTextCrossModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveSimilarMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveSimilarMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveFaces(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveFacesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveFaces(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveFacesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RetrieveConsistentMedias(self, ctx: context.Context, request: pb.RetrieveConsistentMediasRequest, options: List[Callable] = None) -> pb.RetrieveConsistentMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRetrieveConsistentMedias(self, ctx: context.Context, request: pb.RetrieveConsistentMediasRequest, options: List[Callable] = None) -> pb.RetrieveConsistentMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def AssociateWords(self, ctx: context.Context, request: pb.AssociateWordsRequest, options: List[Callable] = None) -> pb.AssociateWordsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncAssociateWords(self, ctx: context.Context, request: pb.AssociateWordsRequest, options: List[Callable] = None) -> pb.AssociateWordsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ExtractImages(self, ctx: context.Context, request: pb.ExtractImagesRequest, options: List[Callable] = None) -> pb.ExtractImagesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncExtractImages(self, ctx: context.Context, request: pb.ExtractImagesRequest, options: List[Callable] = None) -> pb.ExtractImagesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateResourcePackage(self, ctx: context.Context, request: pb.CreateResourcePackageRequest, options: List[Callable] = None) -> pb.CreateResourcePackageResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateResourcePackage(self, ctx: context.Context, request: pb.CreateResourcePackageRequest, options: List[Callable] = None) -> pb.CreateResourcePackageResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteResourcePackage(self, ctx: context.Context, request: pb.DeleteResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteResourcePackage(self, ctx: context.Context, request: pb.DeleteResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UpdateResourcePackage(self, ctx: context.Context, request: pb.UpdateResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUpdateResourcePackage(self, ctx: context.Context, request: pb.UpdateResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeResourcePackage(self, ctx: context.Context, request: pb.DescribeResourcePackageRequest, options: List[Callable] = None) -> pb.DescribePackageResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeResourcePackage(self, ctx: context.Context, request: pb.DescribeResourcePackageRequest, options: List[Callable] = None) -> pb.DescribePackageResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def AddResourceToPackage(self, ctx: context.Context, request: pb.AddResourceToPackageRequest, options: List[Callable] = None) -> pb.AddResourceToPackageResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncAddResourceToPackage(self, ctx: context.Context, request: pb.AddResourceToPackageRequest, options: List[Callable] = None) -> pb.AddResourceToPackageResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteResourceFromPackage(self, ctx: context.Context, request: pb.DeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteResourceFromPackage(self, ctx: context.Context, request: pb.DeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UndeleteResourceFromPackage(self, ctx: context.Context, request: pb.UndeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUndeleteResourceFromPackage(self, ctx: context.Context, request: pb.UndeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def BindMedias(self, ctx: context.Context, request: pb.BindMediasRequest, options: List[Callable] = None) -> pb.BindMediasResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncBindMedias(self, ctx: context.Context, request: pb.BindMediasRequest, options: List[Callable] = None) -> pb.BindMediasResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeMediaDetailsInner(self, ctx: context.Context, request: pb.DescribeMediaDetailsInnerRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsInnerResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeMediaDetailsInner(self, ctx: context.Context, request: pb.DescribeMediaDetailsInnerRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsInnerResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class MediaClientProxyImpl(MediaClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(MediaServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateMedias(self, ctx: context.Context, request: pb.CreateMediasRequest, options: List[Callable] = None) -> pb.CreateMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateMedias', 'CreateMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateMedias(self, ctx: context.Context, request: pb.CreateMediasRequest, options: List[Callable] = None) -> pb.CreateMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateMedias', 'CreateMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CommitMedias(self, ctx: context.Context, request: pb.CommitMediasRequest, options: List[Callable] = None) -> pb.CommitMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CommitMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CommitMedias', 'CommitMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCommitMedias(self, ctx: context.Context, request: pb.CommitMediasRequest, options: List[Callable] = None) -> pb.CommitMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CommitMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CommitMedias', 'CommitMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeMedias(self, ctx: context.Context, request: pb.DescribeMediasRequest, options: List[Callable] = None) -> pb.DescribeMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeMedias', 'DescribeMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeMedias(self, ctx: context.Context, request: pb.DescribeMediasRequest, options: List[Callable] = None) -> pb.DescribeMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeMedias', 'DescribeMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeMediaDetails(self, ctx: context.Context, request: pb.DescribeMediaDetailsRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeMediaDetailsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeMediaDetails', 'DescribeMediaDetails')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeMediaDetails(self, ctx: context.Context, request: pb.DescribeMediaDetailsRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeMediaDetailsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeMediaDetails', 'DescribeMediaDetails')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteMedias(self, ctx: context.Context, request: pb.DeleteMediasRequest, options: List[Callable] = None) -> pb.DeleteMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteMedias', 'DeleteMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteMedias(self, ctx: context.Context, request: pb.DeleteMediasRequest, options: List[Callable] = None) -> pb.DeleteMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteMedias', 'DeleteMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RestoreDeletedMedias(self, ctx: context.Context, request: pb.RestoreDeletedMediasRequest, options: List[Callable] = None) -> pb.RestoreDeletedMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RestoreDeletedMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RestoreDeletedMedias', 'RestoreDeletedMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRestoreDeletedMedias(self, ctx: context.Context, request: pb.RestoreDeletedMediasRequest, options: List[Callable] = None) -> pb.RestoreDeletedMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RestoreDeletedMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RestoreDeletedMedias', 'RestoreDeletedMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def EmptyTrash(self, ctx: context.Context, request: pb.EmptyTrashRequest, options: List[Callable] = None) -> pb.EmptyTrashResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.EmptyTrashResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/EmptyTrash', 'EmptyTrash')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncEmptyTrash(self, ctx: context.Context, request: pb.EmptyTrashRequest, options: List[Callable] = None) -> pb.EmptyTrashResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.EmptyTrashResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/EmptyTrash', 'EmptyTrash')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeCategories(self, ctx: context.Context, request: pb.DescribeCategoriesRequest, options: List[Callable] = None) -> pb.DescribeCategoriesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeCategoriesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeCategories', 'DescribeCategories')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeCategories(self, ctx: context.Context, request: pb.DescribeCategoriesRequest, options: List[Callable] = None) -> pb.DescribeCategoriesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeCategoriesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeCategories', 'DescribeCategories')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ModifyMedia(self, ctx: context.Context, request: pb.ModifyMediaRequest, options: List[Callable] = None) -> pb.ModifyMediaResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyMediaResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyMedia', 'ModifyMedia')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncModifyMedia(self, ctx: context.Context, request: pb.ModifyMediaRequest, options: List[Callable] = None) -> pb.ModifyMediaResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyMediaResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyMedia', 'ModifyMedia')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveRelevantTags(self, ctx: context.Context, request: pb.RetrieveRelevantTagsRequest, options: List[Callable] = None) -> pb.RetrieveRelevantTagsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveRelevantTagsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveRelevantTags', 'RetrieveRelevantTags')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveRelevantTags(self, ctx: context.Context, request: pb.RetrieveRelevantTagsRequest, options: List[Callable] = None) -> pb.RetrieveRelevantTagsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveRelevantTagsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveRelevantTags', 'RetrieveRelevantTags')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveLexicalEntry(self, ctx: context.Context, request: pb.RetrieveLexicalEntryRequest, options: List[Callable] = None) -> pb.RetrieveLexicalEntryResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveLexicalEntryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveLexicalEntry', 'RetrieveLexicalEntry')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveLexicalEntry(self, ctx: context.Context, request: pb.RetrieveLexicalEntryRequest, options: List[Callable] = None) -> pb.RetrieveLexicalEntryResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveLexicalEntryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveLexicalEntry', 'RetrieveLexicalEntry')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveTitleMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveTitleMedias', 'RetrieveTitleMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveTitleMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveTitleMedias', 'RetrieveTitleMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveContentMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveContentMedias', 'RetrieveContentMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveContentMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveContentMedias', 'RetrieveContentMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveTextMultiModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveTextMultiModalMedias', 'RetrieveTextMultiModalMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveTextMultiModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveTextMultiModalMedias', 'RetrieveTextMultiModalMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveTextCrossModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveTextCrossModalMedias', 'RetrieveTextCrossModalMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveTextCrossModalMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveTextCrossModalMedias', 'RetrieveTextCrossModalMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveSimilarMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveSimilarMedias', 'RetrieveSimilarMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveSimilarMedias(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveSimilarMedias', 'RetrieveSimilarMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveFaces(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveFacesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveFacesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveFaces', 'RetrieveFaces')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveFaces(self, ctx: context.Context, request: pb.RetrieveMediasRequest, options: List[Callable] = None) -> pb.RetrieveFacesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveFacesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveFaces', 'RetrieveFaces')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RetrieveConsistentMedias(self, ctx: context.Context, request: pb.RetrieveConsistentMediasRequest, options: List[Callable] = None) -> pb.RetrieveConsistentMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveConsistentMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveConsistentMedias', 'RetrieveConsistentMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRetrieveConsistentMedias(self, ctx: context.Context, request: pb.RetrieveConsistentMediasRequest, options: List[Callable] = None) -> pb.RetrieveConsistentMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RetrieveConsistentMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RetrieveConsistentMedias', 'RetrieveConsistentMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def AssociateWords(self, ctx: context.Context, request: pb.AssociateWordsRequest, options: List[Callable] = None) -> pb.AssociateWordsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.AssociateWordsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/AssociateWords', 'AssociateWords')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncAssociateWords(self, ctx: context.Context, request: pb.AssociateWordsRequest, options: List[Callable] = None) -> pb.AssociateWordsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.AssociateWordsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/AssociateWords', 'AssociateWords')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ExtractImages(self, ctx: context.Context, request: pb.ExtractImagesRequest, options: List[Callable] = None) -> pb.ExtractImagesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ExtractImagesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ExtractImages', 'ExtractImages')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncExtractImages(self, ctx: context.Context, request: pb.ExtractImagesRequest, options: List[Callable] = None) -> pb.ExtractImagesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ExtractImagesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ExtractImages', 'ExtractImages')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateResourcePackage(self, ctx: context.Context, request: pb.CreateResourcePackageRequest, options: List[Callable] = None) -> pb.CreateResourcePackageResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateResourcePackageResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateResourcePackage', 'CreateResourcePackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateResourcePackage(self, ctx: context.Context, request: pb.CreateResourcePackageRequest, options: List[Callable] = None) -> pb.CreateResourcePackageResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateResourcePackageResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateResourcePackage', 'CreateResourcePackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteResourcePackage(self, ctx: context.Context, request: pb.DeleteResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteResourcePackage', 'DeleteResourcePackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteResourcePackage(self, ctx: context.Context, request: pb.DeleteResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteResourcePackage', 'DeleteResourcePackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UpdateResourcePackage(self, ctx: context.Context, request: pb.UpdateResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateResourcePackage', 'UpdateResourcePackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUpdateResourcePackage(self, ctx: context.Context, request: pb.UpdateResourcePackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateResourcePackage', 'UpdateResourcePackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeResourcePackage(self, ctx: context.Context, request: pb.DescribeResourcePackageRequest, options: List[Callable] = None) -> pb.DescribePackageResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribePackageResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeResourcePackage', 'DescribeResourcePackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeResourcePackage(self, ctx: context.Context, request: pb.DescribeResourcePackageRequest, options: List[Callable] = None) -> pb.DescribePackageResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribePackageResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeResourcePackage', 'DescribeResourcePackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def AddResourceToPackage(self, ctx: context.Context, request: pb.AddResourceToPackageRequest, options: List[Callable] = None) -> pb.AddResourceToPackageResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.AddResourceToPackageResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/AddResourceToPackage', 'AddResourceToPackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncAddResourceToPackage(self, ctx: context.Context, request: pb.AddResourceToPackageRequest, options: List[Callable] = None) -> pb.AddResourceToPackageResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.AddResourceToPackageResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/AddResourceToPackage', 'AddResourceToPackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteResourceFromPackage(self, ctx: context.Context, request: pb.DeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteResourceFromPackage', 'DeleteResourceFromPackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteResourceFromPackage(self, ctx: context.Context, request: pb.DeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteResourceFromPackage', 'DeleteResourceFromPackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UndeleteResourceFromPackage(self, ctx: context.Context, request: pb.UndeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UndeleteResourceFromPackage', 'UndeleteResourceFromPackage')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUndeleteResourceFromPackage(self, ctx: context.Context, request: pb.UndeleteResourceFromPackageRequest, options: List[Callable] = None) -> pb.ResourcePackageOperateResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ResourcePackageOperateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UndeleteResourceFromPackage', 'UndeleteResourceFromPackage')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def BindMedias(self, ctx: context.Context, request: pb.BindMediasRequest, options: List[Callable] = None) -> pb.BindMediasResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.BindMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/BindMedias', 'BindMedias')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncBindMedias(self, ctx: context.Context, request: pb.BindMediasRequest, options: List[Callable] = None) -> pb.BindMediasResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.BindMediasResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/BindMedias', 'BindMedias')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeMediaDetailsInner(self, ctx: context.Context, request: pb.DescribeMediaDetailsInnerRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsInnerResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeMediaDetailsInnerResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeMediaDetailsInner', 'DescribeMediaDetailsInner')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeMediaDetailsInner(self, ctx: context.Context, request: pb.DescribeMediaDetailsInnerRequest, options: List[Callable] = None) -> pb.DescribeMediaDetailsInnerResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeMediaDetailsInnerResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeMediaDetailsInner', 'DescribeMediaDetailsInner')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    