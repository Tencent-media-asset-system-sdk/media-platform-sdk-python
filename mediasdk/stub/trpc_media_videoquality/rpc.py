# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: video_quality_evaluation.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# VideoQualityEvaluationService defines service
class VideoQualityEvaluationServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateVideoQualityEvaluationTask(self, ctx: context.Context, request: pb.CreateVideoQualityEvaluationTaskRequest) -> pb.CreateVideoQualityEvaluationTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest) -> pb.DescribeVideoQualityEvaluationTaskDataResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeLiveVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest) -> pb.DescribeLiveVideoQualityEvaluationTaskDataResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeVideoQualityLimitList(self, ctx: context.Context, request: pb.DescribeVideoQualityLimitListRequest) -> pb.DescribeVideoQualityLimitListResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

VideoQualityEvaluationServiceName = "trpc.media.videoquality.VideoQualityEvaluation"  # pylint: disable=invalid-name

# add VideoQualityEvaluationServicer to server
# pylint: disable=invalid-name
def register_VideoQualityEvaluationServicer_server(svr: server.Server, servicer: VideoQualityEvaluationServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateVideoQualityEvaluationTask",
            req_cls=pb.CreateVideoQualityEvaluationTaskRequest,
            rsp_cls=pb.CreateVideoQualityEvaluationTaskResponse,
            impl_func=servicer.CreateVideoQualityEvaluationTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeVideoQualityEvaluationTaskData",
            req_cls=pb.DescribeVideoQualityEvaluationTaskDataRequest,
            rsp_cls=pb.DescribeVideoQualityEvaluationTaskDataResponse,
            impl_func=servicer.DescribeVideoQualityEvaluationTaskData))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeLiveVideoQualityEvaluationTaskData",
            req_cls=pb.DescribeVideoQualityEvaluationTaskDataRequest,
            rsp_cls=pb.DescribeLiveVideoQualityEvaluationTaskDataResponse,
            impl_func=servicer.DescribeLiveVideoQualityEvaluationTaskData))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeVideoQualityLimitList",
            req_cls=pb.DescribeVideoQualityLimitListRequest,
            rsp_cls=pb.DescribeVideoQualityLimitListResponse,
            impl_func=servicer.DescribeVideoQualityLimitList))
    
    desc = server.ServiceDesc(
        service_name="/" + VideoQualityEvaluationServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class VideoQualityEvaluationClientProxy:
    """Client proxy"""
    
    def CreateVideoQualityEvaluationTask(self, ctx: context.Context, request: pb.CreateVideoQualityEvaluationTaskRequest, options: List[Callable] = None) -> pb.CreateVideoQualityEvaluationTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateVideoQualityEvaluationTask(self, ctx: context.Context, request: pb.CreateVideoQualityEvaluationTaskRequest, options: List[Callable] = None) -> pb.CreateVideoQualityEvaluationTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityEvaluationTaskDataResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityEvaluationTaskDataResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeLiveVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeLiveVideoQualityEvaluationTaskDataResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeLiveVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeLiveVideoQualityEvaluationTaskDataResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeVideoQualityLimitList(self, ctx: context.Context, request: pb.DescribeVideoQualityLimitListRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityLimitListResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeVideoQualityLimitList(self, ctx: context.Context, request: pb.DescribeVideoQualityLimitListRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityLimitListResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class VideoQualityEvaluationClientProxyImpl(VideoQualityEvaluationClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(VideoQualityEvaluationServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateVideoQualityEvaluationTask(self, ctx: context.Context, request: pb.CreateVideoQualityEvaluationTaskRequest, options: List[Callable] = None) -> pb.CreateVideoQualityEvaluationTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateVideoQualityEvaluationTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateVideoQualityEvaluationTask', 'CreateVideoQualityEvaluationTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateVideoQualityEvaluationTask(self, ctx: context.Context, request: pb.CreateVideoQualityEvaluationTaskRequest, options: List[Callable] = None) -> pb.CreateVideoQualityEvaluationTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateVideoQualityEvaluationTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateVideoQualityEvaluationTask', 'CreateVideoQualityEvaluationTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityEvaluationTaskDataResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeVideoQualityEvaluationTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeVideoQualityEvaluationTaskData', 'DescribeVideoQualityEvaluationTaskData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityEvaluationTaskDataResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeVideoQualityEvaluationTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeVideoQualityEvaluationTaskData', 'DescribeVideoQualityEvaluationTaskData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeLiveVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeLiveVideoQualityEvaluationTaskDataResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeLiveVideoQualityEvaluationTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeLiveVideoQualityEvaluationTaskData', 'DescribeLiveVideoQualityEvaluationTaskData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeLiveVideoQualityEvaluationTaskData(self, ctx: context.Context, request: pb.DescribeVideoQualityEvaluationTaskDataRequest, options: List[Callable] = None) -> pb.DescribeLiveVideoQualityEvaluationTaskDataResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeLiveVideoQualityEvaluationTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeLiveVideoQualityEvaluationTaskData', 'DescribeLiveVideoQualityEvaluationTaskData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeVideoQualityLimitList(self, ctx: context.Context, request: pb.DescribeVideoQualityLimitListRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityLimitListResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeVideoQualityLimitListResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeVideoQualityLimitList', 'DescribeVideoQualityLimitList')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeVideoQualityLimitList(self, ctx: context.Context, request: pb.DescribeVideoQualityLimitListRequest, options: List[Callable] = None) -> pb.DescribeVideoQualityLimitListResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeVideoQualityLimitListResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeVideoQualityLimitList', 'DescribeVideoQualityLimitList')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    