# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: custom_feature.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# CustomFeatureService defines service
class CustomFeatureServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def DescribeTextCategories(self, ctx: context.Context, request: pb.DescribeTextCategoriesRequest) -> pb.DescribeTextCategoriesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateCustomText(self, ctx: context.Context, request: pb.CreateCustomTextRequest) -> pb.CreateCustomTextResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ModifyCustomText(self, ctx: context.Context, request: pb.ModifyCustomTextRequest) -> pb.ModifyCustomTextResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeCustomTexts(self, ctx: context.Context, request: pb.DescribeCustomTextsRequest) -> pb.DescribeCustomTextsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeLastUpdateTime(self, ctx: context.Context, request: pb.DescribeLastUpdateTimeRequest) -> pb.DescribeLastUpdateTimeResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteCustomText(self, ctx: context.Context, request: pb.DeleteCustomTextRequest) -> pb.DeleteCustomTextResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateFeature(self, ctx: context.Context, request: pb.CreateFeatureRequest) -> pb.CreateFeatureResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ModifyFeature(self, ctx: context.Context, request: pb.ModifyFeatureRequest) -> pb.ModifyFeatureResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeFeatures(self, ctx: context.Context, request: pb.DescribeFeaturesRequest) -> pb.DescribeFeaturesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteFeature(self, ctx: context.Context, request: pb.DeleteFeatureRequest) -> pb.DeleteFeatureResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

CustomFeatureServiceName = "trpc.media.customfeature.CustomFeature"  # pylint: disable=invalid-name

# add CustomFeatureServicer to server
# pylint: disable=invalid-name
def register_CustomFeatureServicer_server(svr: server.Server, servicer: CustomFeatureServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTextCategories",
            req_cls=pb.DescribeTextCategoriesRequest,
            rsp_cls=pb.DescribeTextCategoriesResponse,
            impl_func=servicer.DescribeTextCategories))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateCustomText",
            req_cls=pb.CreateCustomTextRequest,
            rsp_cls=pb.CreateCustomTextResponse,
            impl_func=servicer.CreateCustomText))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ModifyCustomText",
            req_cls=pb.ModifyCustomTextRequest,
            rsp_cls=pb.ModifyCustomTextResponse,
            impl_func=servicer.ModifyCustomText))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeCustomTexts",
            req_cls=pb.DescribeCustomTextsRequest,
            rsp_cls=pb.DescribeCustomTextsResponse,
            impl_func=servicer.DescribeCustomTexts))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeLastUpdateTime",
            req_cls=pb.DescribeLastUpdateTimeRequest,
            rsp_cls=pb.DescribeLastUpdateTimeResponse,
            impl_func=servicer.DescribeLastUpdateTime))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteCustomText",
            req_cls=pb.DeleteCustomTextRequest,
            rsp_cls=pb.DeleteCustomTextResponse,
            impl_func=servicer.DeleteCustomText))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateFeature",
            req_cls=pb.CreateFeatureRequest,
            rsp_cls=pb.CreateFeatureResponse,
            impl_func=servicer.CreateFeature))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ModifyFeature",
            req_cls=pb.ModifyFeatureRequest,
            rsp_cls=pb.ModifyFeatureResponse,
            impl_func=servicer.ModifyFeature))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeFeatures",
            req_cls=pb.DescribeFeaturesRequest,
            rsp_cls=pb.DescribeFeaturesResponse,
            impl_func=servicer.DescribeFeatures))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteFeature",
            req_cls=pb.DeleteFeatureRequest,
            rsp_cls=pb.DeleteFeatureResponse,
            impl_func=servicer.DeleteFeature))
    
    desc = server.ServiceDesc(
        service_name="/" + CustomFeatureServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class CustomFeatureClientProxy:
    """Client proxy"""
    
    def DescribeTextCategories(self, ctx: context.Context, request: pb.DescribeTextCategoriesRequest, options: List[Callable] = None) -> pb.DescribeTextCategoriesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTextCategories(self, ctx: context.Context, request: pb.DescribeTextCategoriesRequest, options: List[Callable] = None) -> pb.DescribeTextCategoriesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateCustomText(self, ctx: context.Context, request: pb.CreateCustomTextRequest, options: List[Callable] = None) -> pb.CreateCustomTextResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateCustomText(self, ctx: context.Context, request: pb.CreateCustomTextRequest, options: List[Callable] = None) -> pb.CreateCustomTextResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ModifyCustomText(self, ctx: context.Context, request: pb.ModifyCustomTextRequest, options: List[Callable] = None) -> pb.ModifyCustomTextResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncModifyCustomText(self, ctx: context.Context, request: pb.ModifyCustomTextRequest, options: List[Callable] = None) -> pb.ModifyCustomTextResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeCustomTexts(self, ctx: context.Context, request: pb.DescribeCustomTextsRequest, options: List[Callable] = None) -> pb.DescribeCustomTextsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeCustomTexts(self, ctx: context.Context, request: pb.DescribeCustomTextsRequest, options: List[Callable] = None) -> pb.DescribeCustomTextsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeLastUpdateTime(self, ctx: context.Context, request: pb.DescribeLastUpdateTimeRequest, options: List[Callable] = None) -> pb.DescribeLastUpdateTimeResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeLastUpdateTime(self, ctx: context.Context, request: pb.DescribeLastUpdateTimeRequest, options: List[Callable] = None) -> pb.DescribeLastUpdateTimeResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteCustomText(self, ctx: context.Context, request: pb.DeleteCustomTextRequest, options: List[Callable] = None) -> pb.DeleteCustomTextResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteCustomText(self, ctx: context.Context, request: pb.DeleteCustomTextRequest, options: List[Callable] = None) -> pb.DeleteCustomTextResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateFeature(self, ctx: context.Context, request: pb.CreateFeatureRequest, options: List[Callable] = None) -> pb.CreateFeatureResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateFeature(self, ctx: context.Context, request: pb.CreateFeatureRequest, options: List[Callable] = None) -> pb.CreateFeatureResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ModifyFeature(self, ctx: context.Context, request: pb.ModifyFeatureRequest, options: List[Callable] = None) -> pb.ModifyFeatureResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncModifyFeature(self, ctx: context.Context, request: pb.ModifyFeatureRequest, options: List[Callable] = None) -> pb.ModifyFeatureResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeFeatures(self, ctx: context.Context, request: pb.DescribeFeaturesRequest, options: List[Callable] = None) -> pb.DescribeFeaturesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeFeatures(self, ctx: context.Context, request: pb.DescribeFeaturesRequest, options: List[Callable] = None) -> pb.DescribeFeaturesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteFeature(self, ctx: context.Context, request: pb.DeleteFeatureRequest, options: List[Callable] = None) -> pb.DeleteFeatureResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteFeature(self, ctx: context.Context, request: pb.DeleteFeatureRequest, options: List[Callable] = None) -> pb.DeleteFeatureResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class CustomFeatureClientProxyImpl(CustomFeatureClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(CustomFeatureServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def DescribeTextCategories(self, ctx: context.Context, request: pb.DescribeTextCategoriesRequest, options: List[Callable] = None) -> pb.DescribeTextCategoriesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTextCategoriesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTextCategories', 'DescribeTextCategories')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTextCategories(self, ctx: context.Context, request: pb.DescribeTextCategoriesRequest, options: List[Callable] = None) -> pb.DescribeTextCategoriesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTextCategoriesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTextCategories', 'DescribeTextCategories')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateCustomText(self, ctx: context.Context, request: pb.CreateCustomTextRequest, options: List[Callable] = None) -> pb.CreateCustomTextResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateCustomTextResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateCustomText', 'CreateCustomText')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateCustomText(self, ctx: context.Context, request: pb.CreateCustomTextRequest, options: List[Callable] = None) -> pb.CreateCustomTextResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateCustomTextResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateCustomText', 'CreateCustomText')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ModifyCustomText(self, ctx: context.Context, request: pb.ModifyCustomTextRequest, options: List[Callable] = None) -> pb.ModifyCustomTextResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyCustomTextResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyCustomText', 'ModifyCustomText')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncModifyCustomText(self, ctx: context.Context, request: pb.ModifyCustomTextRequest, options: List[Callable] = None) -> pb.ModifyCustomTextResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyCustomTextResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyCustomText', 'ModifyCustomText')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeCustomTexts(self, ctx: context.Context, request: pb.DescribeCustomTextsRequest, options: List[Callable] = None) -> pb.DescribeCustomTextsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeCustomTextsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeCustomTexts', 'DescribeCustomTexts')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeCustomTexts(self, ctx: context.Context, request: pb.DescribeCustomTextsRequest, options: List[Callable] = None) -> pb.DescribeCustomTextsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeCustomTextsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeCustomTexts', 'DescribeCustomTexts')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeLastUpdateTime(self, ctx: context.Context, request: pb.DescribeLastUpdateTimeRequest, options: List[Callable] = None) -> pb.DescribeLastUpdateTimeResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeLastUpdateTimeResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeLastUpdateTime', 'DescribeLastUpdateTime')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeLastUpdateTime(self, ctx: context.Context, request: pb.DescribeLastUpdateTimeRequest, options: List[Callable] = None) -> pb.DescribeLastUpdateTimeResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeLastUpdateTimeResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeLastUpdateTime', 'DescribeLastUpdateTime')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteCustomText(self, ctx: context.Context, request: pb.DeleteCustomTextRequest, options: List[Callable] = None) -> pb.DeleteCustomTextResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteCustomTextResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteCustomText', 'DeleteCustomText')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteCustomText(self, ctx: context.Context, request: pb.DeleteCustomTextRequest, options: List[Callable] = None) -> pb.DeleteCustomTextResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteCustomTextResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteCustomText', 'DeleteCustomText')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateFeature(self, ctx: context.Context, request: pb.CreateFeatureRequest, options: List[Callable] = None) -> pb.CreateFeatureResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateFeature', 'CreateFeature')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateFeature(self, ctx: context.Context, request: pb.CreateFeatureRequest, options: List[Callable] = None) -> pb.CreateFeatureResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateFeature', 'CreateFeature')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ModifyFeature(self, ctx: context.Context, request: pb.ModifyFeatureRequest, options: List[Callable] = None) -> pb.ModifyFeatureResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyFeature', 'ModifyFeature')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncModifyFeature(self, ctx: context.Context, request: pb.ModifyFeatureRequest, options: List[Callable] = None) -> pb.ModifyFeatureResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyFeature', 'ModifyFeature')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeFeatures(self, ctx: context.Context, request: pb.DescribeFeaturesRequest, options: List[Callable] = None) -> pb.DescribeFeaturesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeFeaturesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeFeatures', 'DescribeFeatures')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeFeatures(self, ctx: context.Context, request: pb.DescribeFeaturesRequest, options: List[Callable] = None) -> pb.DescribeFeaturesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeFeaturesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeFeatures', 'DescribeFeatures')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteFeature(self, ctx: context.Context, request: pb.DeleteFeatureRequest, options: List[Callable] = None) -> pb.DeleteFeatureResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteFeature', 'DeleteFeature')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteFeature(self, ctx: context.Context, request: pb.DeleteFeatureRequest, options: List[Callable] = None) -> pb.DeleteFeatureResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteFeature', 'DeleteFeature')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    