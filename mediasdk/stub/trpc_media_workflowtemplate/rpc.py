# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: workflow_template.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# WorkflowTemplateService defines service
class WorkflowTemplateServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateWorkflowTemplates(self, ctx: context.Context, request: pb.CreateWorkflowTemplatesRequest) -> pb.CreateWorkflowTemplatesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeWorkflowTemplates(self, ctx: context.Context, request: pb.DescribeWorkflowTemplatesRequest) -> pb.DescribeWorkflowTemplatesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeWorkflowTemplateDetails(self, ctx: context.Context, request: pb.DescribeWorkflowTemplateDetailsRequest) -> pb.DescribeWorkflowTemplateDetailsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteWorkflowTemplates(self, ctx: context.Context, request: pb.DeleteWorkflowTemplatesRequest) -> pb.DeleteWorkflowTemplatesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ModifyWorkflowTemplate(self, ctx: context.Context, request: pb.ModifyWorkflowTemplateRequest) -> pb.ModifyWorkflowTemplateResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeAvailableWorkflowTemplateComponents(self, ctx: context.Context, request: pb.DescribeAvailableWorkflowTemplateComponentsRequest) -> pb.DescribeAvailableWorkflowTemplateComponentsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

WorkflowTemplateServiceName = "trpc.media.workflowtemplate.WorkflowTemplate"  # pylint: disable=invalid-name

# add WorkflowTemplateServicer to server
# pylint: disable=invalid-name
def register_WorkflowTemplateServicer_server(svr: server.Server, servicer: WorkflowTemplateServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateWorkflowTemplates",
            req_cls=pb.CreateWorkflowTemplatesRequest,
            rsp_cls=pb.CreateWorkflowTemplatesResponse,
            impl_func=servicer.CreateWorkflowTemplates))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeWorkflowTemplates",
            req_cls=pb.DescribeWorkflowTemplatesRequest,
            rsp_cls=pb.DescribeWorkflowTemplatesResponse,
            impl_func=servicer.DescribeWorkflowTemplates))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeWorkflowTemplateDetails",
            req_cls=pb.DescribeWorkflowTemplateDetailsRequest,
            rsp_cls=pb.DescribeWorkflowTemplateDetailsResponse,
            impl_func=servicer.DescribeWorkflowTemplateDetails))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteWorkflowTemplates",
            req_cls=pb.DeleteWorkflowTemplatesRequest,
            rsp_cls=pb.DeleteWorkflowTemplatesResponse,
            impl_func=servicer.DeleteWorkflowTemplates))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ModifyWorkflowTemplate",
            req_cls=pb.ModifyWorkflowTemplateRequest,
            rsp_cls=pb.ModifyWorkflowTemplateResponse,
            impl_func=servicer.ModifyWorkflowTemplate))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeAvailableWorkflowTemplateComponents",
            req_cls=pb.DescribeAvailableWorkflowTemplateComponentsRequest,
            rsp_cls=pb.DescribeAvailableWorkflowTemplateComponentsResponse,
            impl_func=servicer.DescribeAvailableWorkflowTemplateComponents))
    
    desc = server.ServiceDesc(
        service_name="/" + WorkflowTemplateServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class WorkflowTemplateClientProxy:
    """Client proxy"""
    
    def CreateWorkflowTemplates(self, ctx: context.Context, request: pb.CreateWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.CreateWorkflowTemplatesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateWorkflowTemplates(self, ctx: context.Context, request: pb.CreateWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.CreateWorkflowTemplatesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeWorkflowTemplates(self, ctx: context.Context, request: pb.DescribeWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplatesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeWorkflowTemplates(self, ctx: context.Context, request: pb.DescribeWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplatesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeWorkflowTemplateDetails(self, ctx: context.Context, request: pb.DescribeWorkflowTemplateDetailsRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplateDetailsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeWorkflowTemplateDetails(self, ctx: context.Context, request: pb.DescribeWorkflowTemplateDetailsRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplateDetailsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteWorkflowTemplates(self, ctx: context.Context, request: pb.DeleteWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DeleteWorkflowTemplatesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteWorkflowTemplates(self, ctx: context.Context, request: pb.DeleteWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DeleteWorkflowTemplatesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ModifyWorkflowTemplate(self, ctx: context.Context, request: pb.ModifyWorkflowTemplateRequest, options: List[Callable] = None) -> pb.ModifyWorkflowTemplateResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncModifyWorkflowTemplate(self, ctx: context.Context, request: pb.ModifyWorkflowTemplateRequest, options: List[Callable] = None) -> pb.ModifyWorkflowTemplateResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeAvailableWorkflowTemplateComponents(self, ctx: context.Context, request: pb.DescribeAvailableWorkflowTemplateComponentsRequest, options: List[Callable] = None) -> pb.DescribeAvailableWorkflowTemplateComponentsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeAvailableWorkflowTemplateComponents(self, ctx: context.Context, request: pb.DescribeAvailableWorkflowTemplateComponentsRequest, options: List[Callable] = None) -> pb.DescribeAvailableWorkflowTemplateComponentsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class WorkflowTemplateClientProxyImpl(WorkflowTemplateClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(WorkflowTemplateServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateWorkflowTemplates(self, ctx: context.Context, request: pb.CreateWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.CreateWorkflowTemplatesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateWorkflowTemplatesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateWorkflowTemplates', 'CreateWorkflowTemplates')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateWorkflowTemplates(self, ctx: context.Context, request: pb.CreateWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.CreateWorkflowTemplatesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateWorkflowTemplatesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateWorkflowTemplates', 'CreateWorkflowTemplates')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeWorkflowTemplates(self, ctx: context.Context, request: pb.DescribeWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplatesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeWorkflowTemplatesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeWorkflowTemplates', 'DescribeWorkflowTemplates')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeWorkflowTemplates(self, ctx: context.Context, request: pb.DescribeWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplatesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeWorkflowTemplatesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeWorkflowTemplates', 'DescribeWorkflowTemplates')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeWorkflowTemplateDetails(self, ctx: context.Context, request: pb.DescribeWorkflowTemplateDetailsRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplateDetailsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeWorkflowTemplateDetailsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeWorkflowTemplateDetails', 'DescribeWorkflowTemplateDetails')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeWorkflowTemplateDetails(self, ctx: context.Context, request: pb.DescribeWorkflowTemplateDetailsRequest, options: List[Callable] = None) -> pb.DescribeWorkflowTemplateDetailsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeWorkflowTemplateDetailsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeWorkflowTemplateDetails', 'DescribeWorkflowTemplateDetails')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteWorkflowTemplates(self, ctx: context.Context, request: pb.DeleteWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DeleteWorkflowTemplatesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteWorkflowTemplatesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteWorkflowTemplates', 'DeleteWorkflowTemplates')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteWorkflowTemplates(self, ctx: context.Context, request: pb.DeleteWorkflowTemplatesRequest, options: List[Callable] = None) -> pb.DeleteWorkflowTemplatesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteWorkflowTemplatesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteWorkflowTemplates', 'DeleteWorkflowTemplates')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ModifyWorkflowTemplate(self, ctx: context.Context, request: pb.ModifyWorkflowTemplateRequest, options: List[Callable] = None) -> pb.ModifyWorkflowTemplateResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyWorkflowTemplateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyWorkflowTemplate', 'ModifyWorkflowTemplate')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncModifyWorkflowTemplate(self, ctx: context.Context, request: pb.ModifyWorkflowTemplateRequest, options: List[Callable] = None) -> pb.ModifyWorkflowTemplateResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyWorkflowTemplateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyWorkflowTemplate', 'ModifyWorkflowTemplate')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeAvailableWorkflowTemplateComponents(self, ctx: context.Context, request: pb.DescribeAvailableWorkflowTemplateComponentsRequest, options: List[Callable] = None) -> pb.DescribeAvailableWorkflowTemplateComponentsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAvailableWorkflowTemplateComponentsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAvailableWorkflowTemplateComponents', 'DescribeAvailableWorkflowTemplateComponents')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeAvailableWorkflowTemplateComponents(self, ctx: context.Context, request: pb.DescribeAvailableWorkflowTemplateComponentsRequest, options: List[Callable] = None) -> pb.DescribeAvailableWorkflowTemplateComponentsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAvailableWorkflowTemplateComponentsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAvailableWorkflowTemplateComponents', 'DescribeAvailableWorkflowTemplateComponents')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    