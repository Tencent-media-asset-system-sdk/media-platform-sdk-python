# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: person_user_define.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# UserDefinePersonService defines service
class UserDefinePersonServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateUserDefineGroup(self, ctx: context.Context, request: pb.CreateUserDefineGroupRequest) -> pb.CreateUserDefineGroupResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeUserDefineGroup(self, ctx: context.Context, request: pb.DescribeUserDefineGroupRequest) -> pb.DescribeUserDefineGroupResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RemoveUserDefineGroup(self, ctx: context.Context, request: pb.RemoveUserDefineGroupRequest) -> pb.RemoveUserDefineGroupResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UpdateUserDefineGroup(self, ctx: context.Context, request: pb.UpdateUserDefineGroupRequest) -> pb.UpdateUserDefineGroupResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateUserDefinePerson(self, ctx: context.Context, request: pb.CreateUserDefinePersonRequest) -> pb.CreateUserDefinePersonResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RemoveUserDefinePerson(self, ctx: context.Context, request: pb.RemoveUserDefinePersonRequest) -> pb.RemoveUserDefinePersonResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UpdateUserDefinePerson(self, ctx: context.Context, request: pb.UpdateUserDefinePersonRequest) -> pb.UpdateUserDefinePersonResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeUserDefinePerson(self, ctx: context.Context, request: pb.DescribeUserDefinePersonRequest) -> pb.DescribeUserDefinePersonResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeUserDefinePersonDetail(self, ctx: context.Context, request: pb.DescribeUserDefinePersonDetailRequest) -> pb.DescribeUserDefinePersonDetailResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeUserDefinePersonWithFeature(self, ctx: context.Context, request: pb.DescribeUserDefinePersonWithFeatureRequest) -> pb.DescribeUserDefinePersonWithFeatureResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreatePersonCategory(self, ctx: context.Context, request: pb.CreatePersonCategoryRequest) -> pb.CreatePersonCategoryResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RemovePersonCategory(self, ctx: context.Context, request: pb.RemovePersonCategoryRequest) -> pb.RemovePersonCategoryResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribePersonCategory(self, ctx: context.Context, request: pb.DescribePersonCategoryRequest) -> pb.DescribePersonCategoryResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RevertPerson(self, ctx: context.Context, request: pb.PersonRevertRequest) -> pb.PersonRevertResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeRevertTasks(self, ctx: context.Context, request: pb.DescribeRevertTasksRequest) -> pb.DescribeRevertTasksResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

UserDefinePersonServiceName = "trpc.media.personuserdefine.UserDefinePerson"  # pylint: disable=invalid-name

# add UserDefinePersonServicer to server
# pylint: disable=invalid-name
def register_UserDefinePersonServicer_server(svr: server.Server, servicer: UserDefinePersonServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateUserDefineGroup",
            req_cls=pb.CreateUserDefineGroupRequest,
            rsp_cls=pb.CreateUserDefineGroupResponse,
            impl_func=servicer.CreateUserDefineGroup))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeUserDefineGroup",
            req_cls=pb.DescribeUserDefineGroupRequest,
            rsp_cls=pb.DescribeUserDefineGroupResponse,
            impl_func=servicer.DescribeUserDefineGroup))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RemoveUserDefineGroup",
            req_cls=pb.RemoveUserDefineGroupRequest,
            rsp_cls=pb.RemoveUserDefineGroupResponse,
            impl_func=servicer.RemoveUserDefineGroup))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UpdateUserDefineGroup",
            req_cls=pb.UpdateUserDefineGroupRequest,
            rsp_cls=pb.UpdateUserDefineGroupResponse,
            impl_func=servicer.UpdateUserDefineGroup))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateUserDefinePerson",
            req_cls=pb.CreateUserDefinePersonRequest,
            rsp_cls=pb.CreateUserDefinePersonResponse,
            impl_func=servicer.CreateUserDefinePerson))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RemoveUserDefinePerson",
            req_cls=pb.RemoveUserDefinePersonRequest,
            rsp_cls=pb.RemoveUserDefinePersonResponse,
            impl_func=servicer.RemoveUserDefinePerson))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UpdateUserDefinePerson",
            req_cls=pb.UpdateUserDefinePersonRequest,
            rsp_cls=pb.UpdateUserDefinePersonResponse,
            impl_func=servicer.UpdateUserDefinePerson))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeUserDefinePerson",
            req_cls=pb.DescribeUserDefinePersonRequest,
            rsp_cls=pb.DescribeUserDefinePersonResponse,
            impl_func=servicer.DescribeUserDefinePerson))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeUserDefinePersonDetail",
            req_cls=pb.DescribeUserDefinePersonDetailRequest,
            rsp_cls=pb.DescribeUserDefinePersonDetailResponse,
            impl_func=servicer.DescribeUserDefinePersonDetail))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeUserDefinePersonWithFeature",
            req_cls=pb.DescribeUserDefinePersonWithFeatureRequest,
            rsp_cls=pb.DescribeUserDefinePersonWithFeatureResponse,
            impl_func=servicer.DescribeUserDefinePersonWithFeature))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreatePersonCategory",
            req_cls=pb.CreatePersonCategoryRequest,
            rsp_cls=pb.CreatePersonCategoryResponse,
            impl_func=servicer.CreatePersonCategory))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RemovePersonCategory",
            req_cls=pb.RemovePersonCategoryRequest,
            rsp_cls=pb.RemovePersonCategoryResponse,
            impl_func=servicer.RemovePersonCategory))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribePersonCategory",
            req_cls=pb.DescribePersonCategoryRequest,
            rsp_cls=pb.DescribePersonCategoryResponse,
            impl_func=servicer.DescribePersonCategory))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RevertPerson",
            req_cls=pb.PersonRevertRequest,
            rsp_cls=pb.PersonRevertResponse,
            impl_func=servicer.RevertPerson))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeRevertTasks",
            req_cls=pb.DescribeRevertTasksRequest,
            rsp_cls=pb.DescribeRevertTasksResponse,
            impl_func=servicer.DescribeRevertTasks))
    
    desc = server.ServiceDesc(
        service_name="/" + UserDefinePersonServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class UserDefinePersonClientProxy:
    """Client proxy"""
    
    def CreateUserDefineGroup(self, ctx: context.Context, request: pb.CreateUserDefineGroupRequest, options: List[Callable] = None) -> pb.CreateUserDefineGroupResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateUserDefineGroup(self, ctx: context.Context, request: pb.CreateUserDefineGroupRequest, options: List[Callable] = None) -> pb.CreateUserDefineGroupResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeUserDefineGroup(self, ctx: context.Context, request: pb.DescribeUserDefineGroupRequest, options: List[Callable] = None) -> pb.DescribeUserDefineGroupResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeUserDefineGroup(self, ctx: context.Context, request: pb.DescribeUserDefineGroupRequest, options: List[Callable] = None) -> pb.DescribeUserDefineGroupResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RemoveUserDefineGroup(self, ctx: context.Context, request: pb.RemoveUserDefineGroupRequest, options: List[Callable] = None) -> pb.RemoveUserDefineGroupResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRemoveUserDefineGroup(self, ctx: context.Context, request: pb.RemoveUserDefineGroupRequest, options: List[Callable] = None) -> pb.RemoveUserDefineGroupResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UpdateUserDefineGroup(self, ctx: context.Context, request: pb.UpdateUserDefineGroupRequest, options: List[Callable] = None) -> pb.UpdateUserDefineGroupResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUpdateUserDefineGroup(self, ctx: context.Context, request: pb.UpdateUserDefineGroupRequest, options: List[Callable] = None) -> pb.UpdateUserDefineGroupResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateUserDefinePerson(self, ctx: context.Context, request: pb.CreateUserDefinePersonRequest, options: List[Callable] = None) -> pb.CreateUserDefinePersonResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateUserDefinePerson(self, ctx: context.Context, request: pb.CreateUserDefinePersonRequest, options: List[Callable] = None) -> pb.CreateUserDefinePersonResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RemoveUserDefinePerson(self, ctx: context.Context, request: pb.RemoveUserDefinePersonRequest, options: List[Callable] = None) -> pb.RemoveUserDefinePersonResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRemoveUserDefinePerson(self, ctx: context.Context, request: pb.RemoveUserDefinePersonRequest, options: List[Callable] = None) -> pb.RemoveUserDefinePersonResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UpdateUserDefinePerson(self, ctx: context.Context, request: pb.UpdateUserDefinePersonRequest, options: List[Callable] = None) -> pb.UpdateUserDefinePersonResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUpdateUserDefinePerson(self, ctx: context.Context, request: pb.UpdateUserDefinePersonRequest, options: List[Callable] = None) -> pb.UpdateUserDefinePersonResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeUserDefinePerson(self, ctx: context.Context, request: pb.DescribeUserDefinePersonRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeUserDefinePerson(self, ctx: context.Context, request: pb.DescribeUserDefinePersonRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeUserDefinePersonDetail(self, ctx: context.Context, request: pb.DescribeUserDefinePersonDetailRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonDetailResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeUserDefinePersonDetail(self, ctx: context.Context, request: pb.DescribeUserDefinePersonDetailRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonDetailResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeUserDefinePersonWithFeature(self, ctx: context.Context, request: pb.DescribeUserDefinePersonWithFeatureRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonWithFeatureResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeUserDefinePersonWithFeature(self, ctx: context.Context, request: pb.DescribeUserDefinePersonWithFeatureRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonWithFeatureResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreatePersonCategory(self, ctx: context.Context, request: pb.CreatePersonCategoryRequest, options: List[Callable] = None) -> pb.CreatePersonCategoryResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreatePersonCategory(self, ctx: context.Context, request: pb.CreatePersonCategoryRequest, options: List[Callable] = None) -> pb.CreatePersonCategoryResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RemovePersonCategory(self, ctx: context.Context, request: pb.RemovePersonCategoryRequest, options: List[Callable] = None) -> pb.RemovePersonCategoryResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRemovePersonCategory(self, ctx: context.Context, request: pb.RemovePersonCategoryRequest, options: List[Callable] = None) -> pb.RemovePersonCategoryResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribePersonCategory(self, ctx: context.Context, request: pb.DescribePersonCategoryRequest, options: List[Callable] = None) -> pb.DescribePersonCategoryResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribePersonCategory(self, ctx: context.Context, request: pb.DescribePersonCategoryRequest, options: List[Callable] = None) -> pb.DescribePersonCategoryResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RevertPerson(self, ctx: context.Context, request: pb.PersonRevertRequest, options: List[Callable] = None) -> pb.PersonRevertResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRevertPerson(self, ctx: context.Context, request: pb.PersonRevertRequest, options: List[Callable] = None) -> pb.PersonRevertResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeRevertTasks(self, ctx: context.Context, request: pb.DescribeRevertTasksRequest, options: List[Callable] = None) -> pb.DescribeRevertTasksResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeRevertTasks(self, ctx: context.Context, request: pb.DescribeRevertTasksRequest, options: List[Callable] = None) -> pb.DescribeRevertTasksResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class UserDefinePersonClientProxyImpl(UserDefinePersonClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(UserDefinePersonServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateUserDefineGroup(self, ctx: context.Context, request: pb.CreateUserDefineGroupRequest, options: List[Callable] = None) -> pb.CreateUserDefineGroupResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateUserDefineGroup', 'CreateUserDefineGroup')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateUserDefineGroup(self, ctx: context.Context, request: pb.CreateUserDefineGroupRequest, options: List[Callable] = None) -> pb.CreateUserDefineGroupResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateUserDefineGroup', 'CreateUserDefineGroup')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeUserDefineGroup(self, ctx: context.Context, request: pb.DescribeUserDefineGroupRequest, options: List[Callable] = None) -> pb.DescribeUserDefineGroupResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefineGroup', 'DescribeUserDefineGroup')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeUserDefineGroup(self, ctx: context.Context, request: pb.DescribeUserDefineGroupRequest, options: List[Callable] = None) -> pb.DescribeUserDefineGroupResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefineGroup', 'DescribeUserDefineGroup')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RemoveUserDefineGroup(self, ctx: context.Context, request: pb.RemoveUserDefineGroupRequest, options: List[Callable] = None) -> pb.RemoveUserDefineGroupResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemoveUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemoveUserDefineGroup', 'RemoveUserDefineGroup')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRemoveUserDefineGroup(self, ctx: context.Context, request: pb.RemoveUserDefineGroupRequest, options: List[Callable] = None) -> pb.RemoveUserDefineGroupResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemoveUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemoveUserDefineGroup', 'RemoveUserDefineGroup')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UpdateUserDefineGroup(self, ctx: context.Context, request: pb.UpdateUserDefineGroupRequest, options: List[Callable] = None) -> pb.UpdateUserDefineGroupResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateUserDefineGroup', 'UpdateUserDefineGroup')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUpdateUserDefineGroup(self, ctx: context.Context, request: pb.UpdateUserDefineGroupRequest, options: List[Callable] = None) -> pb.UpdateUserDefineGroupResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateUserDefineGroupResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateUserDefineGroup', 'UpdateUserDefineGroup')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateUserDefinePerson(self, ctx: context.Context, request: pb.CreateUserDefinePersonRequest, options: List[Callable] = None) -> pb.CreateUserDefinePersonResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateUserDefinePerson', 'CreateUserDefinePerson')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateUserDefinePerson(self, ctx: context.Context, request: pb.CreateUserDefinePersonRequest, options: List[Callable] = None) -> pb.CreateUserDefinePersonResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateUserDefinePerson', 'CreateUserDefinePerson')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RemoveUserDefinePerson(self, ctx: context.Context, request: pb.RemoveUserDefinePersonRequest, options: List[Callable] = None) -> pb.RemoveUserDefinePersonResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemoveUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemoveUserDefinePerson', 'RemoveUserDefinePerson')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRemoveUserDefinePerson(self, ctx: context.Context, request: pb.RemoveUserDefinePersonRequest, options: List[Callable] = None) -> pb.RemoveUserDefinePersonResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemoveUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemoveUserDefinePerson', 'RemoveUserDefinePerson')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UpdateUserDefinePerson(self, ctx: context.Context, request: pb.UpdateUserDefinePersonRequest, options: List[Callable] = None) -> pb.UpdateUserDefinePersonResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateUserDefinePerson', 'UpdateUserDefinePerson')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUpdateUserDefinePerson(self, ctx: context.Context, request: pb.UpdateUserDefinePersonRequest, options: List[Callable] = None) -> pb.UpdateUserDefinePersonResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateUserDefinePerson', 'UpdateUserDefinePerson')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeUserDefinePerson(self, ctx: context.Context, request: pb.DescribeUserDefinePersonRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefinePerson', 'DescribeUserDefinePerson')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeUserDefinePerson(self, ctx: context.Context, request: pb.DescribeUserDefinePersonRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefinePersonResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefinePerson', 'DescribeUserDefinePerson')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeUserDefinePersonDetail(self, ctx: context.Context, request: pb.DescribeUserDefinePersonDetailRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonDetailResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefinePersonDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefinePersonDetail', 'DescribeUserDefinePersonDetail')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeUserDefinePersonDetail(self, ctx: context.Context, request: pb.DescribeUserDefinePersonDetailRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonDetailResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefinePersonDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefinePersonDetail', 'DescribeUserDefinePersonDetail')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeUserDefinePersonWithFeature(self, ctx: context.Context, request: pb.DescribeUserDefinePersonWithFeatureRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonWithFeatureResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefinePersonWithFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefinePersonWithFeature', 'DescribeUserDefinePersonWithFeature')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeUserDefinePersonWithFeature(self, ctx: context.Context, request: pb.DescribeUserDefinePersonWithFeatureRequest, options: List[Callable] = None) -> pb.DescribeUserDefinePersonWithFeatureResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeUserDefinePersonWithFeatureResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeUserDefinePersonWithFeature', 'DescribeUserDefinePersonWithFeature')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreatePersonCategory(self, ctx: context.Context, request: pb.CreatePersonCategoryRequest, options: List[Callable] = None) -> pb.CreatePersonCategoryResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreatePersonCategoryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreatePersonCategory', 'CreatePersonCategory')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreatePersonCategory(self, ctx: context.Context, request: pb.CreatePersonCategoryRequest, options: List[Callable] = None) -> pb.CreatePersonCategoryResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreatePersonCategoryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreatePersonCategory', 'CreatePersonCategory')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RemovePersonCategory(self, ctx: context.Context, request: pb.RemovePersonCategoryRequest, options: List[Callable] = None) -> pb.RemovePersonCategoryResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemovePersonCategoryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemovePersonCategory', 'RemovePersonCategory')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRemovePersonCategory(self, ctx: context.Context, request: pb.RemovePersonCategoryRequest, options: List[Callable] = None) -> pb.RemovePersonCategoryResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemovePersonCategoryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemovePersonCategory', 'RemovePersonCategory')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribePersonCategory(self, ctx: context.Context, request: pb.DescribePersonCategoryRequest, options: List[Callable] = None) -> pb.DescribePersonCategoryResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribePersonCategoryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribePersonCategory', 'DescribePersonCategory')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribePersonCategory(self, ctx: context.Context, request: pb.DescribePersonCategoryRequest, options: List[Callable] = None) -> pb.DescribePersonCategoryResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribePersonCategoryResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribePersonCategory', 'DescribePersonCategory')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RevertPerson(self, ctx: context.Context, request: pb.PersonRevertRequest, options: List[Callable] = None) -> pb.PersonRevertResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.PersonRevertResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RevertPerson', 'RevertPerson')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRevertPerson(self, ctx: context.Context, request: pb.PersonRevertRequest, options: List[Callable] = None) -> pb.PersonRevertResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.PersonRevertResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RevertPerson', 'RevertPerson')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeRevertTasks(self, ctx: context.Context, request: pb.DescribeRevertTasksRequest, options: List[Callable] = None) -> pb.DescribeRevertTasksResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeRevertTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeRevertTasks', 'DescribeRevertTasks')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeRevertTasks(self, ctx: context.Context, request: pb.DescribeRevertTasksRequest, options: List[Callable] = None) -> pb.DescribeRevertTasksResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeRevertTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeRevertTasks', 'DescribeRevertTasks')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    