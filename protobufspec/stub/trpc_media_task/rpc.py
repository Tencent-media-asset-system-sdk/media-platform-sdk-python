# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: task.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# TaskService defines service
class TaskServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def DescribeSupportedMediaTypes(self, ctx: context.Context, request: pb.DescribeSupportedMediaTypesRequest) -> pb.DescribeSupportedMediaTypesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateTask(self, ctx: context.Context, request: pb.CreateTaskRequest) -> pb.CreateTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTask(self, ctx: context.Context, request: pb.DescribeTaskRequest) -> pb.DescribeTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTasks(self, ctx: context.Context, request: pb.DescribeTasksRequest) -> pb.DescribeTasksResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def StartTask(self, ctx: context.Context, request: pb.StartTaskRequest) -> pb.StartTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def StartTasks(self, ctx: context.Context, request: pb.StartTasksRequest) -> pb.StartTasksResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def StopTask(self, ctx: context.Context, request: pb.StopTaskRequest) -> pb.StopTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def StopTasks(self, ctx: context.Context, request: pb.StopTasksRequest) -> pb.StopTasksResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteTask(self, ctx: context.Context, request: pb.DeleteTaskRequest) -> pb.DeleteTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def TopTask(self, ctx: context.Context, request: pb.TopTaskRequest) -> pb.TopTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTaskDetail(self, ctx: context.Context, request: pb.DescribeTaskDetailRequest) -> pb.DescribeTaskDetailResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ModifyTaskData(self, ctx: context.Context, request: pb.ModifyTaskDataRequest) -> pb.ModifyTaskDataResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTaskListFile(self, ctx: context.Context, request: pb.DescribeTaskListFileRequest) -> pb.DescribeTaskListFileResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeStatistics(self, ctx: context.Context, request: pb.DescribeStatisticsRequest) -> pb.DescribeStatisticsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeWorkflowProgress(self, ctx: context.Context, request: pb.DescribeWorkflowProgressRequest) -> pb.DescribeWorkflowProgressResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def StopTasksInner(self, ctx: context.Context, request: pb.StopTasksRequest) -> pb.StopTasksResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CheckWorkflowTemplate(self, ctx: context.Context, request: pb.CheckWorkflowTemplateRequest) -> pb.CheckWorkflowTemplateResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTagAnalyseInput(self, ctx: context.Context, request: pb.DescribeTagAnalyseInputRequest) -> pb.DescribeTagAnalyseInputResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

TaskServiceName = "trpc.media.task.Task"  # pylint: disable=invalid-name

# add TaskServicer to server
# pylint: disable=invalid-name
def register_TaskServicer_server(svr: server.Server, servicer: TaskServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeSupportedMediaTypes",
            req_cls=pb.DescribeSupportedMediaTypesRequest,
            rsp_cls=pb.DescribeSupportedMediaTypesResponse,
            impl_func=servicer.DescribeSupportedMediaTypes))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateTask",
            req_cls=pb.CreateTaskRequest,
            rsp_cls=pb.CreateTaskResponse,
            impl_func=servicer.CreateTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTask",
            req_cls=pb.DescribeTaskRequest,
            rsp_cls=pb.DescribeTaskResponse,
            impl_func=servicer.DescribeTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTasks",
            req_cls=pb.DescribeTasksRequest,
            rsp_cls=pb.DescribeTasksResponse,
            impl_func=servicer.DescribeTasks))
    
    rpc_method_handlers.append(
        server.Method(
            name="/StartTask",
            req_cls=pb.StartTaskRequest,
            rsp_cls=pb.StartTaskResponse,
            impl_func=servicer.StartTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/StartTasks",
            req_cls=pb.StartTasksRequest,
            rsp_cls=pb.StartTasksResponse,
            impl_func=servicer.StartTasks))
    
    rpc_method_handlers.append(
        server.Method(
            name="/StopTask",
            req_cls=pb.StopTaskRequest,
            rsp_cls=pb.StopTaskResponse,
            impl_func=servicer.StopTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/StopTasks",
            req_cls=pb.StopTasksRequest,
            rsp_cls=pb.StopTasksResponse,
            impl_func=servicer.StopTasks))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteTask",
            req_cls=pb.DeleteTaskRequest,
            rsp_cls=pb.DeleteTaskResponse,
            impl_func=servicer.DeleteTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/TopTask",
            req_cls=pb.TopTaskRequest,
            rsp_cls=pb.TopTaskResponse,
            impl_func=servicer.TopTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTaskDetail",
            req_cls=pb.DescribeTaskDetailRequest,
            rsp_cls=pb.DescribeTaskDetailResponse,
            impl_func=servicer.DescribeTaskDetail))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ModifyTaskData",
            req_cls=pb.ModifyTaskDataRequest,
            rsp_cls=pb.ModifyTaskDataResponse,
            impl_func=servicer.ModifyTaskData))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTaskListFile",
            req_cls=pb.DescribeTaskListFileRequest,
            rsp_cls=pb.DescribeTaskListFileResponse,
            impl_func=servicer.DescribeTaskListFile))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeStatistics",
            req_cls=pb.DescribeStatisticsRequest,
            rsp_cls=pb.DescribeStatisticsResponse,
            impl_func=servicer.DescribeStatistics))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeWorkflowProgress",
            req_cls=pb.DescribeWorkflowProgressRequest,
            rsp_cls=pb.DescribeWorkflowProgressResponse,
            impl_func=servicer.DescribeWorkflowProgress))
    
    rpc_method_handlers.append(
        server.Method(
            name="/StopTasksInner",
            req_cls=pb.StopTasksRequest,
            rsp_cls=pb.StopTasksResponse,
            impl_func=servicer.StopTasksInner))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CheckWorkflowTemplate",
            req_cls=pb.CheckWorkflowTemplateRequest,
            rsp_cls=pb.CheckWorkflowTemplateResponse,
            impl_func=servicer.CheckWorkflowTemplate))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTagAnalyseInput",
            req_cls=pb.DescribeTagAnalyseInputRequest,
            rsp_cls=pb.DescribeTagAnalyseInputResponse,
            impl_func=servicer.DescribeTagAnalyseInput))
    
    desc = server.ServiceDesc(
        service_name="/" + TaskServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class TaskClientProxy:
    """Client proxy"""
    
    def DescribeSupportedMediaTypes(self, ctx: context.Context, request: pb.DescribeSupportedMediaTypesRequest, options: List[Callable] = None) -> pb.DescribeSupportedMediaTypesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeSupportedMediaTypes(self, ctx: context.Context, request: pb.DescribeSupportedMediaTypesRequest, options: List[Callable] = None) -> pb.DescribeSupportedMediaTypesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateTask(self, ctx: context.Context, request: pb.CreateTaskRequest, options: List[Callable] = None) -> pb.CreateTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateTask(self, ctx: context.Context, request: pb.CreateTaskRequest, options: List[Callable] = None) -> pb.CreateTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTask(self, ctx: context.Context, request: pb.DescribeTaskRequest, options: List[Callable] = None) -> pb.DescribeTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTask(self, ctx: context.Context, request: pb.DescribeTaskRequest, options: List[Callable] = None) -> pb.DescribeTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTasks(self, ctx: context.Context, request: pb.DescribeTasksRequest, options: List[Callable] = None) -> pb.DescribeTasksResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTasks(self, ctx: context.Context, request: pb.DescribeTasksRequest, options: List[Callable] = None) -> pb.DescribeTasksResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def StartTask(self, ctx: context.Context, request: pb.StartTaskRequest, options: List[Callable] = None) -> pb.StartTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncStartTask(self, ctx: context.Context, request: pb.StartTaskRequest, options: List[Callable] = None) -> pb.StartTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def StartTasks(self, ctx: context.Context, request: pb.StartTasksRequest, options: List[Callable] = None) -> pb.StartTasksResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncStartTasks(self, ctx: context.Context, request: pb.StartTasksRequest, options: List[Callable] = None) -> pb.StartTasksResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def StopTask(self, ctx: context.Context, request: pb.StopTaskRequest, options: List[Callable] = None) -> pb.StopTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncStopTask(self, ctx: context.Context, request: pb.StopTaskRequest, options: List[Callable] = None) -> pb.StopTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def StopTasks(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncStopTasks(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteTask(self, ctx: context.Context, request: pb.DeleteTaskRequest, options: List[Callable] = None) -> pb.DeleteTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteTask(self, ctx: context.Context, request: pb.DeleteTaskRequest, options: List[Callable] = None) -> pb.DeleteTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def TopTask(self, ctx: context.Context, request: pb.TopTaskRequest, options: List[Callable] = None) -> pb.TopTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncTopTask(self, ctx: context.Context, request: pb.TopTaskRequest, options: List[Callable] = None) -> pb.TopTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTaskDetail(self, ctx: context.Context, request: pb.DescribeTaskDetailRequest, options: List[Callable] = None) -> pb.DescribeTaskDetailResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTaskDetail(self, ctx: context.Context, request: pb.DescribeTaskDetailRequest, options: List[Callable] = None) -> pb.DescribeTaskDetailResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ModifyTaskData(self, ctx: context.Context, request: pb.ModifyTaskDataRequest, options: List[Callable] = None) -> pb.ModifyTaskDataResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncModifyTaskData(self, ctx: context.Context, request: pb.ModifyTaskDataRequest, options: List[Callable] = None) -> pb.ModifyTaskDataResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTaskListFile(self, ctx: context.Context, request: pb.DescribeTaskListFileRequest, options: List[Callable] = None) -> pb.DescribeTaskListFileResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTaskListFile(self, ctx: context.Context, request: pb.DescribeTaskListFileRequest, options: List[Callable] = None) -> pb.DescribeTaskListFileResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeStatistics(self, ctx: context.Context, request: pb.DescribeStatisticsRequest, options: List[Callable] = None) -> pb.DescribeStatisticsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeStatistics(self, ctx: context.Context, request: pb.DescribeStatisticsRequest, options: List[Callable] = None) -> pb.DescribeStatisticsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeWorkflowProgress(self, ctx: context.Context, request: pb.DescribeWorkflowProgressRequest, options: List[Callable] = None) -> pb.DescribeWorkflowProgressResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeWorkflowProgress(self, ctx: context.Context, request: pb.DescribeWorkflowProgressRequest, options: List[Callable] = None) -> pb.DescribeWorkflowProgressResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def StopTasksInner(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncStopTasksInner(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CheckWorkflowTemplate(self, ctx: context.Context, request: pb.CheckWorkflowTemplateRequest, options: List[Callable] = None) -> pb.CheckWorkflowTemplateResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCheckWorkflowTemplate(self, ctx: context.Context, request: pb.CheckWorkflowTemplateRequest, options: List[Callable] = None) -> pb.CheckWorkflowTemplateResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTagAnalyseInput(self, ctx: context.Context, request: pb.DescribeTagAnalyseInputRequest, options: List[Callable] = None) -> pb.DescribeTagAnalyseInputResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTagAnalyseInput(self, ctx: context.Context, request: pb.DescribeTagAnalyseInputRequest, options: List[Callable] = None) -> pb.DescribeTagAnalyseInputResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class TaskClientProxyImpl(TaskClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(TaskServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def DescribeSupportedMediaTypes(self, ctx: context.Context, request: pb.DescribeSupportedMediaTypesRequest, options: List[Callable] = None) -> pb.DescribeSupportedMediaTypesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeSupportedMediaTypesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeSupportedMediaTypes', 'DescribeSupportedMediaTypes')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeSupportedMediaTypes(self, ctx: context.Context, request: pb.DescribeSupportedMediaTypesRequest, options: List[Callable] = None) -> pb.DescribeSupportedMediaTypesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeSupportedMediaTypesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeSupportedMediaTypes', 'DescribeSupportedMediaTypes')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateTask(self, ctx: context.Context, request: pb.CreateTaskRequest, options: List[Callable] = None) -> pb.CreateTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateTask', 'CreateTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateTask(self, ctx: context.Context, request: pb.CreateTaskRequest, options: List[Callable] = None) -> pb.CreateTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateTask', 'CreateTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTask(self, ctx: context.Context, request: pb.DescribeTaskRequest, options: List[Callable] = None) -> pb.DescribeTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTask', 'DescribeTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTask(self, ctx: context.Context, request: pb.DescribeTaskRequest, options: List[Callable] = None) -> pb.DescribeTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTask', 'DescribeTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTasks(self, ctx: context.Context, request: pb.DescribeTasksRequest, options: List[Callable] = None) -> pb.DescribeTasksResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTasks', 'DescribeTasks')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTasks(self, ctx: context.Context, request: pb.DescribeTasksRequest, options: List[Callable] = None) -> pb.DescribeTasksResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTasks', 'DescribeTasks')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def StartTask(self, ctx: context.Context, request: pb.StartTaskRequest, options: List[Callable] = None) -> pb.StartTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StartTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StartTask', 'StartTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncStartTask(self, ctx: context.Context, request: pb.StartTaskRequest, options: List[Callable] = None) -> pb.StartTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StartTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StartTask', 'StartTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def StartTasks(self, ctx: context.Context, request: pb.StartTasksRequest, options: List[Callable] = None) -> pb.StartTasksResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StartTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StartTasks', 'StartTasks')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncStartTasks(self, ctx: context.Context, request: pb.StartTasksRequest, options: List[Callable] = None) -> pb.StartTasksResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StartTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StartTasks', 'StartTasks')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def StopTask(self, ctx: context.Context, request: pb.StopTaskRequest, options: List[Callable] = None) -> pb.StopTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopTask', 'StopTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncStopTask(self, ctx: context.Context, request: pb.StopTaskRequest, options: List[Callable] = None) -> pb.StopTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopTask', 'StopTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def StopTasks(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopTasks', 'StopTasks')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncStopTasks(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopTasks', 'StopTasks')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteTask(self, ctx: context.Context, request: pb.DeleteTaskRequest, options: List[Callable] = None) -> pb.DeleteTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteTask', 'DeleteTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteTask(self, ctx: context.Context, request: pb.DeleteTaskRequest, options: List[Callable] = None) -> pb.DeleteTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteTask', 'DeleteTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def TopTask(self, ctx: context.Context, request: pb.TopTaskRequest, options: List[Callable] = None) -> pb.TopTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.TopTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/TopTask', 'TopTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncTopTask(self, ctx: context.Context, request: pb.TopTaskRequest, options: List[Callable] = None) -> pb.TopTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.TopTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/TopTask', 'TopTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTaskDetail(self, ctx: context.Context, request: pb.DescribeTaskDetailRequest, options: List[Callable] = None) -> pb.DescribeTaskDetailResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTaskDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTaskDetail', 'DescribeTaskDetail')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTaskDetail(self, ctx: context.Context, request: pb.DescribeTaskDetailRequest, options: List[Callable] = None) -> pb.DescribeTaskDetailResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTaskDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTaskDetail', 'DescribeTaskDetail')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ModifyTaskData(self, ctx: context.Context, request: pb.ModifyTaskDataRequest, options: List[Callable] = None) -> pb.ModifyTaskDataResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyTaskData', 'ModifyTaskData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncModifyTaskData(self, ctx: context.Context, request: pb.ModifyTaskDataRequest, options: List[Callable] = None) -> pb.ModifyTaskDataResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyTaskData', 'ModifyTaskData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTaskListFile(self, ctx: context.Context, request: pb.DescribeTaskListFileRequest, options: List[Callable] = None) -> pb.DescribeTaskListFileResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTaskListFileResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTaskListFile', 'DescribeTaskListFile')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTaskListFile(self, ctx: context.Context, request: pb.DescribeTaskListFileRequest, options: List[Callable] = None) -> pb.DescribeTaskListFileResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTaskListFileResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTaskListFile', 'DescribeTaskListFile')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeStatistics(self, ctx: context.Context, request: pb.DescribeStatisticsRequest, options: List[Callable] = None) -> pb.DescribeStatisticsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeStatisticsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeStatistics', 'DescribeStatistics')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeStatistics(self, ctx: context.Context, request: pb.DescribeStatisticsRequest, options: List[Callable] = None) -> pb.DescribeStatisticsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeStatisticsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeStatistics', 'DescribeStatistics')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeWorkflowProgress(self, ctx: context.Context, request: pb.DescribeWorkflowProgressRequest, options: List[Callable] = None) -> pb.DescribeWorkflowProgressResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeWorkflowProgressResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeWorkflowProgress', 'DescribeWorkflowProgress')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeWorkflowProgress(self, ctx: context.Context, request: pb.DescribeWorkflowProgressRequest, options: List[Callable] = None) -> pb.DescribeWorkflowProgressResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeWorkflowProgressResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeWorkflowProgress', 'DescribeWorkflowProgress')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def StopTasksInner(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopTasksInner', 'StopTasksInner')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncStopTasksInner(self, ctx: context.Context, request: pb.StopTasksRequest, options: List[Callable] = None) -> pb.StopTasksResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopTasksInner', 'StopTasksInner')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CheckWorkflowTemplate(self, ctx: context.Context, request: pb.CheckWorkflowTemplateRequest, options: List[Callable] = None) -> pb.CheckWorkflowTemplateResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CheckWorkflowTemplateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CheckWorkflowTemplate', 'CheckWorkflowTemplate')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCheckWorkflowTemplate(self, ctx: context.Context, request: pb.CheckWorkflowTemplateRequest, options: List[Callable] = None) -> pb.CheckWorkflowTemplateResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CheckWorkflowTemplateResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CheckWorkflowTemplate', 'CheckWorkflowTemplate')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTagAnalyseInput(self, ctx: context.Context, request: pb.DescribeTagAnalyseInputRequest, options: List[Callable] = None) -> pb.DescribeTagAnalyseInputResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagAnalyseInputResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTagAnalyseInput', 'DescribeTagAnalyseInput')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTagAnalyseInput(self, ctx: context.Context, request: pb.DescribeTagAnalyseInputRequest, options: List[Callable] = None) -> pb.DescribeTagAnalyseInputResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagAnalyseInputResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTagAnalyseInput', 'DescribeTagAnalyseInput')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
# TaskCallbackService defines service
class TaskCallbackServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def FinishedTask(self, ctx: context.Context, request: pb.FinishedTaskRequest) -> pb.FinishedTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

TaskCallbackServiceName = "trpc.media.task.TaskCallback"  # pylint: disable=invalid-name

# add TaskCallbackServicer to server
# pylint: disable=invalid-name
def register_TaskCallbackServicer_server(svr: server.Server, servicer: TaskCallbackServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/FinishedTask",
            req_cls=pb.FinishedTaskRequest,
            rsp_cls=pb.FinishedTaskResponse,
            impl_func=servicer.FinishedTask))
    
    desc = server.ServiceDesc(
        service_name="/" + TaskCallbackServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class TaskCallbackClientProxy:
    """Client proxy"""
    
    def FinishedTask(self, ctx: context.Context, request: pb.FinishedTaskRequest, options: List[Callable] = None) -> pb.FinishedTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncFinishedTask(self, ctx: context.Context, request: pb.FinishedTaskRequest, options: List[Callable] = None) -> pb.FinishedTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class TaskCallbackClientProxyImpl(TaskCallbackClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(TaskCallbackServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def FinishedTask(self, ctx: context.Context, request: pb.FinishedTaskRequest, options: List[Callable] = None) -> pb.FinishedTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.FinishedTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/FinishedTask', 'FinishedTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncFinishedTask(self, ctx: context.Context, request: pb.FinishedTaskRequest, options: List[Callable] = None) -> pb.FinishedTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.FinishedTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/FinishedTask', 'FinishedTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    