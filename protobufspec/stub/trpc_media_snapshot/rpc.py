# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: snapshot.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# SnapshotService defines service
class SnapshotServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateSnapshot(self, ctx: context.Context, request: pb.CreateSnapshotRequest) -> pb.CreateSnapshotResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeSnapshotData(self, ctx: context.Context, request: pb.DescribeSnapshotRequest) -> pb.DescribeSnapshotResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UpdateSnapshot(self, ctx: context.Context, request: pb.UpdateSnapshotRequest) -> pb.UpdateSnapshotResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

SnapshotServiceName = "trpc.media.snapshot.Snapshot"  # pylint: disable=invalid-name

# add SnapshotServicer to server
# pylint: disable=invalid-name
def register_SnapshotServicer_server(svr: server.Server, servicer: SnapshotServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateSnapshot",
            req_cls=pb.CreateSnapshotRequest,
            rsp_cls=pb.CreateSnapshotResponse,
            impl_func=servicer.CreateSnapshot))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeSnapshotData",
            req_cls=pb.DescribeSnapshotRequest,
            rsp_cls=pb.DescribeSnapshotResponse,
            impl_func=servicer.DescribeSnapshotData))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UpdateSnapshot",
            req_cls=pb.UpdateSnapshotRequest,
            rsp_cls=pb.UpdateSnapshotResponse,
            impl_func=servicer.UpdateSnapshot))
    
    desc = server.ServiceDesc(
        service_name="/" + SnapshotServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class SnapshotClientProxy:
    """Client proxy"""
    
    def CreateSnapshot(self, ctx: context.Context, request: pb.CreateSnapshotRequest, options: List[Callable] = None) -> pb.CreateSnapshotResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateSnapshot(self, ctx: context.Context, request: pb.CreateSnapshotRequest, options: List[Callable] = None) -> pb.CreateSnapshotResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeSnapshotData(self, ctx: context.Context, request: pb.DescribeSnapshotRequest, options: List[Callable] = None) -> pb.DescribeSnapshotResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeSnapshotData(self, ctx: context.Context, request: pb.DescribeSnapshotRequest, options: List[Callable] = None) -> pb.DescribeSnapshotResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UpdateSnapshot(self, ctx: context.Context, request: pb.UpdateSnapshotRequest, options: List[Callable] = None) -> pb.UpdateSnapshotResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUpdateSnapshot(self, ctx: context.Context, request: pb.UpdateSnapshotRequest, options: List[Callable] = None) -> pb.UpdateSnapshotResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class SnapshotClientProxyImpl(SnapshotClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(SnapshotServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateSnapshot(self, ctx: context.Context, request: pb.CreateSnapshotRequest, options: List[Callable] = None) -> pb.CreateSnapshotResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateSnapshotResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateSnapshot', 'CreateSnapshot')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateSnapshot(self, ctx: context.Context, request: pb.CreateSnapshotRequest, options: List[Callable] = None) -> pb.CreateSnapshotResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateSnapshotResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateSnapshot', 'CreateSnapshot')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeSnapshotData(self, ctx: context.Context, request: pb.DescribeSnapshotRequest, options: List[Callable] = None) -> pb.DescribeSnapshotResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeSnapshotResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeSnapshotData', 'DescribeSnapshotData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeSnapshotData(self, ctx: context.Context, request: pb.DescribeSnapshotRequest, options: List[Callable] = None) -> pb.DescribeSnapshotResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeSnapshotResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeSnapshotData', 'DescribeSnapshotData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UpdateSnapshot(self, ctx: context.Context, request: pb.UpdateSnapshotRequest, options: List[Callable] = None) -> pb.UpdateSnapshotResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateSnapshotResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateSnapshot', 'UpdateSnapshot')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUpdateSnapshot(self, ctx: context.Context, request: pb.UpdateSnapshotRequest, options: List[Callable] = None) -> pb.UpdateSnapshotResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateSnapshotResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateSnapshot', 'UpdateSnapshot')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    