# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: ai_video_process.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# AIVideoProcessService defines service
class AIVideoProcessServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateAIVideoProcessTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest) -> pb.CreateAIVideoProcessResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeAIVideoProcessDetail(self, ctx: context.Context, request: pb.DescribeAIVideoProcessDetailRequest) -> pb.DescribeAIVideoProcessDetailResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeAIVideoProcessTasks(self, ctx: context.Context, request: pb.DescribeAIVideoProcessTasksRequest) -> pb.DescribeAIVideoProcessTasksResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UpdateAIVideoProcessTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest) -> pb.UpdateAIVideoProcessResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeAIVideoProcessConfig(self, ctx: context.Context, request: pb.DescribeAIVideoProcessConfigRequest) -> pb.DescribeAIVideoProcessConfigResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateVideoCropTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest) -> pb.CreateAIVideoProcessResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def UpdateVideoCropTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest) -> pb.UpdateAIVideoProcessResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateM3UIndexTask(self, ctx: context.Context, request: pb.CreateM3UIndexTaskRequest) -> pb.CreateM3UIndexTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeM3UIndexDetail(self, ctx: context.Context, request: pb.DescribeM3UIndexDetailRequest) -> pb.DescribeM3UIndexDetailResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def StopAIVideoProcessTask(self, ctx: context.Context, request: pb.StopAIVideoProcessTaskReq) -> pb.StopAIVideoProcessTaskRsp:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def RemoveAIVideoProcessTask(self, ctx: context.Context, request: pb.RemoveAIVideoProcessTaskReq) -> pb.RemoveAIVideoProcessTaskRsp:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

AIVideoProcessServiceName = "trpc.media.aivideoprocess.AIVideoProcess"  # pylint: disable=invalid-name

# add AIVideoProcessServicer to server
# pylint: disable=invalid-name
def register_AIVideoProcessServicer_server(svr: server.Server, servicer: AIVideoProcessServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateAIVideoProcessTask",
            req_cls=pb.CreateAIVideoProcessTaskRequest,
            rsp_cls=pb.CreateAIVideoProcessResponse,
            impl_func=servicer.CreateAIVideoProcessTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeAIVideoProcessDetail",
            req_cls=pb.DescribeAIVideoProcessDetailRequest,
            rsp_cls=pb.DescribeAIVideoProcessDetailResponse,
            impl_func=servicer.DescribeAIVideoProcessDetail))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeAIVideoProcessTasks",
            req_cls=pb.DescribeAIVideoProcessTasksRequest,
            rsp_cls=pb.DescribeAIVideoProcessTasksResponse,
            impl_func=servicer.DescribeAIVideoProcessTasks))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UpdateAIVideoProcessTask",
            req_cls=pb.UpdateAIVideoProcessTaskRequest,
            rsp_cls=pb.UpdateAIVideoProcessResponse,
            impl_func=servicer.UpdateAIVideoProcessTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeAIVideoProcessConfig",
            req_cls=pb.DescribeAIVideoProcessConfigRequest,
            rsp_cls=pb.DescribeAIVideoProcessConfigResponse,
            impl_func=servicer.DescribeAIVideoProcessConfig))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateVideoCropTask",
            req_cls=pb.CreateAIVideoProcessTaskRequest,
            rsp_cls=pb.CreateAIVideoProcessResponse,
            impl_func=servicer.CreateVideoCropTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/UpdateVideoCropTask",
            req_cls=pb.UpdateAIVideoProcessTaskRequest,
            rsp_cls=pb.UpdateAIVideoProcessResponse,
            impl_func=servicer.UpdateVideoCropTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateM3UIndexTask",
            req_cls=pb.CreateM3UIndexTaskRequest,
            rsp_cls=pb.CreateM3UIndexTaskResponse,
            impl_func=servicer.CreateM3UIndexTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeM3UIndexDetail",
            req_cls=pb.DescribeM3UIndexDetailRequest,
            rsp_cls=pb.DescribeM3UIndexDetailResponse,
            impl_func=servicer.DescribeM3UIndexDetail))
    
    rpc_method_handlers.append(
        server.Method(
            name="/StopAIVideoProcessTask",
            req_cls=pb.StopAIVideoProcessTaskReq,
            rsp_cls=pb.StopAIVideoProcessTaskRsp,
            impl_func=servicer.StopAIVideoProcessTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/RemoveAIVideoProcessTask",
            req_cls=pb.RemoveAIVideoProcessTaskReq,
            rsp_cls=pb.RemoveAIVideoProcessTaskRsp,
            impl_func=servicer.RemoveAIVideoProcessTask))
    
    desc = server.ServiceDesc(
        service_name="/" + AIVideoProcessServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class AIVideoProcessClientProxy:
    """Client proxy"""
    
    def CreateAIVideoProcessTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateAIVideoProcessTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeAIVideoProcessDetail(self, ctx: context.Context, request: pb.DescribeAIVideoProcessDetailRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessDetailResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeAIVideoProcessDetail(self, ctx: context.Context, request: pb.DescribeAIVideoProcessDetailRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessDetailResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeAIVideoProcessTasks(self, ctx: context.Context, request: pb.DescribeAIVideoProcessTasksRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessTasksResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeAIVideoProcessTasks(self, ctx: context.Context, request: pb.DescribeAIVideoProcessTasksRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessTasksResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UpdateAIVideoProcessTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUpdateAIVideoProcessTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeAIVideoProcessConfig(self, ctx: context.Context, request: pb.DescribeAIVideoProcessConfigRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessConfigResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeAIVideoProcessConfig(self, ctx: context.Context, request: pb.DescribeAIVideoProcessConfigRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessConfigResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateVideoCropTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateVideoCropTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def UpdateVideoCropTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncUpdateVideoCropTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateM3UIndexTask(self, ctx: context.Context, request: pb.CreateM3UIndexTaskRequest, options: List[Callable] = None) -> pb.CreateM3UIndexTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateM3UIndexTask(self, ctx: context.Context, request: pb.CreateM3UIndexTaskRequest, options: List[Callable] = None) -> pb.CreateM3UIndexTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeM3UIndexDetail(self, ctx: context.Context, request: pb.DescribeM3UIndexDetailRequest, options: List[Callable] = None) -> pb.DescribeM3UIndexDetailResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeM3UIndexDetail(self, ctx: context.Context, request: pb.DescribeM3UIndexDetailRequest, options: List[Callable] = None) -> pb.DescribeM3UIndexDetailResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def StopAIVideoProcessTask(self, ctx: context.Context, request: pb.StopAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.StopAIVideoProcessTaskRsp:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncStopAIVideoProcessTask(self, ctx: context.Context, request: pb.StopAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.StopAIVideoProcessTaskRsp:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def RemoveAIVideoProcessTask(self, ctx: context.Context, request: pb.RemoveAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.RemoveAIVideoProcessTaskRsp:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncRemoveAIVideoProcessTask(self, ctx: context.Context, request: pb.RemoveAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.RemoveAIVideoProcessTaskRsp:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class AIVideoProcessClientProxyImpl(AIVideoProcessClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(AIVideoProcessServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateAIVideoProcessTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateAIVideoProcessTask', 'CreateAIVideoProcessTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateAIVideoProcessTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateAIVideoProcessTask', 'CreateAIVideoProcessTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeAIVideoProcessDetail(self, ctx: context.Context, request: pb.DescribeAIVideoProcessDetailRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessDetailResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAIVideoProcessDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAIVideoProcessDetail', 'DescribeAIVideoProcessDetail')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeAIVideoProcessDetail(self, ctx: context.Context, request: pb.DescribeAIVideoProcessDetailRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessDetailResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAIVideoProcessDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAIVideoProcessDetail', 'DescribeAIVideoProcessDetail')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeAIVideoProcessTasks(self, ctx: context.Context, request: pb.DescribeAIVideoProcessTasksRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessTasksResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAIVideoProcessTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAIVideoProcessTasks', 'DescribeAIVideoProcessTasks')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeAIVideoProcessTasks(self, ctx: context.Context, request: pb.DescribeAIVideoProcessTasksRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessTasksResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAIVideoProcessTasksResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAIVideoProcessTasks', 'DescribeAIVideoProcessTasks')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UpdateAIVideoProcessTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateAIVideoProcessTask', 'UpdateAIVideoProcessTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUpdateAIVideoProcessTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateAIVideoProcessTask', 'UpdateAIVideoProcessTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeAIVideoProcessConfig(self, ctx: context.Context, request: pb.DescribeAIVideoProcessConfigRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessConfigResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAIVideoProcessConfigResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAIVideoProcessConfig', 'DescribeAIVideoProcessConfig')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeAIVideoProcessConfig(self, ctx: context.Context, request: pb.DescribeAIVideoProcessConfigRequest, options: List[Callable] = None) -> pb.DescribeAIVideoProcessConfigResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeAIVideoProcessConfigResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeAIVideoProcessConfig', 'DescribeAIVideoProcessConfig')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateVideoCropTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateVideoCropTask', 'CreateVideoCropTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateVideoCropTask(self, ctx: context.Context, request: pb.CreateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.CreateAIVideoProcessResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateVideoCropTask', 'CreateVideoCropTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def UpdateVideoCropTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateVideoCropTask', 'UpdateVideoCropTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncUpdateVideoCropTask(self, ctx: context.Context, request: pb.UpdateAIVideoProcessTaskRequest, options: List[Callable] = None) -> pb.UpdateAIVideoProcessResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.UpdateAIVideoProcessResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/UpdateVideoCropTask', 'UpdateVideoCropTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateM3UIndexTask(self, ctx: context.Context, request: pb.CreateM3UIndexTaskRequest, options: List[Callable] = None) -> pb.CreateM3UIndexTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateM3UIndexTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateM3UIndexTask', 'CreateM3UIndexTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateM3UIndexTask(self, ctx: context.Context, request: pb.CreateM3UIndexTaskRequest, options: List[Callable] = None) -> pb.CreateM3UIndexTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateM3UIndexTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateM3UIndexTask', 'CreateM3UIndexTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeM3UIndexDetail(self, ctx: context.Context, request: pb.DescribeM3UIndexDetailRequest, options: List[Callable] = None) -> pb.DescribeM3UIndexDetailResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeM3UIndexDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeM3UIndexDetail', 'DescribeM3UIndexDetail')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeM3UIndexDetail(self, ctx: context.Context, request: pb.DescribeM3UIndexDetailRequest, options: List[Callable] = None) -> pb.DescribeM3UIndexDetailResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeM3UIndexDetailResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeM3UIndexDetail', 'DescribeM3UIndexDetail')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def StopAIVideoProcessTask(self, ctx: context.Context, request: pb.StopAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.StopAIVideoProcessTaskRsp:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopAIVideoProcessTaskRsp
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopAIVideoProcessTask', 'StopAIVideoProcessTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncStopAIVideoProcessTask(self, ctx: context.Context, request: pb.StopAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.StopAIVideoProcessTaskRsp:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.StopAIVideoProcessTaskRsp
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/StopAIVideoProcessTask', 'StopAIVideoProcessTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def RemoveAIVideoProcessTask(self, ctx: context.Context, request: pb.RemoveAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.RemoveAIVideoProcessTaskRsp:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemoveAIVideoProcessTaskRsp
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemoveAIVideoProcessTask', 'RemoveAIVideoProcessTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncRemoveAIVideoProcessTask(self, ctx: context.Context, request: pb.RemoveAIVideoProcessTaskReq, options: List[Callable] = None) -> pb.RemoveAIVideoProcessTaskRsp:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.RemoveAIVideoProcessTaskRsp
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/RemoveAIVideoProcessTask', 'RemoveAIVideoProcessTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    