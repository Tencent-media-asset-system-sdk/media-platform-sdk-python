# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: ai_tag_analyse.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# AiTagAnalyseService defines service
class AiTagAnalyseServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def DescribeL1L2Labels(self, ctx: context.Context, request: pb.CommonRequest) -> pb.DescribeL1L2LabelsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateTag(self, ctx: context.Context, request: pb.CreateTagRequest) -> pb.CreateTagResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ImportTag(self, ctx: context.Context, request: pb.ImportTagRequest) -> pb.ImportTagResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteTag(self, ctx: context.Context, request: pb.DeleteTagRequest) -> pb.DeleteTagResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def ModifyTag(self, ctx: context.Context, request: pb.ModifyTagRequest) -> pb.ModifyTagResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTags(self, ctx: context.Context, request: pb.DescribeTagsRequest) -> pb.DescribeTagsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def CreateTagAnalysisTask(self, ctx: context.Context, request: pb.CreateTagAnalysisTaskRequest) -> pb.CreateTagAnalysisTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTagAnalysisTaskData(self, ctx: context.Context, request: pb.DescribeTagAnalysisTaskDataRequest) -> pb.DescribeTagAnalysisTaskDataResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeTagFiles(self, ctx: context.Context, request: pb.DescribeTagFilesRequest) -> pb.DescribeTagFilesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DeleteTagFiles(self, ctx: context.Context, request: pb.DeleteTagFilesRequest) -> pb.DeleteTagFilesResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def GetTagFileUrl(self, ctx: context.Context, request: pb.TagFileUrlRequest) -> pb.TagFileUrlResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

AiTagAnalyseServiceName = "trpc.media.aitaganalyse.AiTagAnalyse"  # pylint: disable=invalid-name

# add AiTagAnalyseServicer to server
# pylint: disable=invalid-name
def register_AiTagAnalyseServicer_server(svr: server.Server, servicer: AiTagAnalyseServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeL1L2Labels",
            req_cls=pb.CommonRequest,
            rsp_cls=pb.DescribeL1L2LabelsResponse,
            impl_func=servicer.DescribeL1L2Labels))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateTag",
            req_cls=pb.CreateTagRequest,
            rsp_cls=pb.CreateTagResponse,
            impl_func=servicer.CreateTag))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ImportTag",
            req_cls=pb.ImportTagRequest,
            rsp_cls=pb.ImportTagResponse,
            impl_func=servicer.ImportTag))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteTag",
            req_cls=pb.DeleteTagRequest,
            rsp_cls=pb.DeleteTagResponse,
            impl_func=servicer.DeleteTag))
    
    rpc_method_handlers.append(
        server.Method(
            name="/ModifyTag",
            req_cls=pb.ModifyTagRequest,
            rsp_cls=pb.ModifyTagResponse,
            impl_func=servicer.ModifyTag))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTags",
            req_cls=pb.DescribeTagsRequest,
            rsp_cls=pb.DescribeTagsResponse,
            impl_func=servicer.DescribeTags))
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateTagAnalysisTask",
            req_cls=pb.CreateTagAnalysisTaskRequest,
            rsp_cls=pb.CreateTagAnalysisTaskResponse,
            impl_func=servicer.CreateTagAnalysisTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTagAnalysisTaskData",
            req_cls=pb.DescribeTagAnalysisTaskDataRequest,
            rsp_cls=pb.DescribeTagAnalysisTaskDataResponse,
            impl_func=servicer.DescribeTagAnalysisTaskData))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeTagFiles",
            req_cls=pb.DescribeTagFilesRequest,
            rsp_cls=pb.DescribeTagFilesResponse,
            impl_func=servicer.DescribeTagFiles))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DeleteTagFiles",
            req_cls=pb.DeleteTagFilesRequest,
            rsp_cls=pb.DeleteTagFilesResponse,
            impl_func=servicer.DeleteTagFiles))
    
    rpc_method_handlers.append(
        server.Method(
            name="/GetTagFileUrl",
            req_cls=pb.TagFileUrlRequest,
            rsp_cls=pb.TagFileUrlResponse,
            impl_func=servicer.GetTagFileUrl))
    
    desc = server.ServiceDesc(
        service_name="/" + AiTagAnalyseServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class AiTagAnalyseClientProxy:
    """Client proxy"""
    
    def DescribeL1L2Labels(self, ctx: context.Context, request: pb.CommonRequest, options: List[Callable] = None) -> pb.DescribeL1L2LabelsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeL1L2Labels(self, ctx: context.Context, request: pb.CommonRequest, options: List[Callable] = None) -> pb.DescribeL1L2LabelsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateTag(self, ctx: context.Context, request: pb.CreateTagRequest, options: List[Callable] = None) -> pb.CreateTagResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateTag(self, ctx: context.Context, request: pb.CreateTagRequest, options: List[Callable] = None) -> pb.CreateTagResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ImportTag(self, ctx: context.Context, request: pb.ImportTagRequest, options: List[Callable] = None) -> pb.ImportTagResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncImportTag(self, ctx: context.Context, request: pb.ImportTagRequest, options: List[Callable] = None) -> pb.ImportTagResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteTag(self, ctx: context.Context, request: pb.DeleteTagRequest, options: List[Callable] = None) -> pb.DeleteTagResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteTag(self, ctx: context.Context, request: pb.DeleteTagRequest, options: List[Callable] = None) -> pb.DeleteTagResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def ModifyTag(self, ctx: context.Context, request: pb.ModifyTagRequest, options: List[Callable] = None) -> pb.ModifyTagResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncModifyTag(self, ctx: context.Context, request: pb.ModifyTagRequest, options: List[Callable] = None) -> pb.ModifyTagResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTags(self, ctx: context.Context, request: pb.DescribeTagsRequest, options: List[Callable] = None) -> pb.DescribeTagsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTags(self, ctx: context.Context, request: pb.DescribeTagsRequest, options: List[Callable] = None) -> pb.DescribeTagsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def CreateTagAnalysisTask(self, ctx: context.Context, request: pb.CreateTagAnalysisTaskRequest, options: List[Callable] = None) -> pb.CreateTagAnalysisTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateTagAnalysisTask(self, ctx: context.Context, request: pb.CreateTagAnalysisTaskRequest, options: List[Callable] = None) -> pb.CreateTagAnalysisTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTagAnalysisTaskData(self, ctx: context.Context, request: pb.DescribeTagAnalysisTaskDataRequest, options: List[Callable] = None) -> pb.DescribeTagAnalysisTaskDataResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTagAnalysisTaskData(self, ctx: context.Context, request: pb.DescribeTagAnalysisTaskDataRequest, options: List[Callable] = None) -> pb.DescribeTagAnalysisTaskDataResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeTagFiles(self, ctx: context.Context, request: pb.DescribeTagFilesRequest, options: List[Callable] = None) -> pb.DescribeTagFilesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeTagFiles(self, ctx: context.Context, request: pb.DescribeTagFilesRequest, options: List[Callable] = None) -> pb.DescribeTagFilesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DeleteTagFiles(self, ctx: context.Context, request: pb.DeleteTagFilesRequest, options: List[Callable] = None) -> pb.DeleteTagFilesResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDeleteTagFiles(self, ctx: context.Context, request: pb.DeleteTagFilesRequest, options: List[Callable] = None) -> pb.DeleteTagFilesResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def GetTagFileUrl(self, ctx: context.Context, request: pb.TagFileUrlRequest, options: List[Callable] = None) -> pb.TagFileUrlResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncGetTagFileUrl(self, ctx: context.Context, request: pb.TagFileUrlRequest, options: List[Callable] = None) -> pb.TagFileUrlResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class AiTagAnalyseClientProxyImpl(AiTagAnalyseClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(AiTagAnalyseServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def DescribeL1L2Labels(self, ctx: context.Context, request: pb.CommonRequest, options: List[Callable] = None) -> pb.DescribeL1L2LabelsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeL1L2LabelsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeL1L2Labels', 'DescribeL1L2Labels')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeL1L2Labels(self, ctx: context.Context, request: pb.CommonRequest, options: List[Callable] = None) -> pb.DescribeL1L2LabelsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeL1L2LabelsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeL1L2Labels', 'DescribeL1L2Labels')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateTag(self, ctx: context.Context, request: pb.CreateTagRequest, options: List[Callable] = None) -> pb.CreateTagResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateTag', 'CreateTag')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateTag(self, ctx: context.Context, request: pb.CreateTagRequest, options: List[Callable] = None) -> pb.CreateTagResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateTag', 'CreateTag')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ImportTag(self, ctx: context.Context, request: pb.ImportTagRequest, options: List[Callable] = None) -> pb.ImportTagResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ImportTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ImportTag', 'ImportTag')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncImportTag(self, ctx: context.Context, request: pb.ImportTagRequest, options: List[Callable] = None) -> pb.ImportTagResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ImportTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ImportTag', 'ImportTag')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteTag(self, ctx: context.Context, request: pb.DeleteTagRequest, options: List[Callable] = None) -> pb.DeleteTagResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteTag', 'DeleteTag')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteTag(self, ctx: context.Context, request: pb.DeleteTagRequest, options: List[Callable] = None) -> pb.DeleteTagResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteTag', 'DeleteTag')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def ModifyTag(self, ctx: context.Context, request: pb.ModifyTagRequest, options: List[Callable] = None) -> pb.ModifyTagResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyTag', 'ModifyTag')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncModifyTag(self, ctx: context.Context, request: pb.ModifyTagRequest, options: List[Callable] = None) -> pb.ModifyTagResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.ModifyTagResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/ModifyTag', 'ModifyTag')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTags(self, ctx: context.Context, request: pb.DescribeTagsRequest, options: List[Callable] = None) -> pb.DescribeTagsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTags', 'DescribeTags')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTags(self, ctx: context.Context, request: pb.DescribeTagsRequest, options: List[Callable] = None) -> pb.DescribeTagsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTags', 'DescribeTags')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def CreateTagAnalysisTask(self, ctx: context.Context, request: pb.CreateTagAnalysisTaskRequest, options: List[Callable] = None) -> pb.CreateTagAnalysisTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateTagAnalysisTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateTagAnalysisTask', 'CreateTagAnalysisTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateTagAnalysisTask(self, ctx: context.Context, request: pb.CreateTagAnalysisTaskRequest, options: List[Callable] = None) -> pb.CreateTagAnalysisTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateTagAnalysisTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateTagAnalysisTask', 'CreateTagAnalysisTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTagAnalysisTaskData(self, ctx: context.Context, request: pb.DescribeTagAnalysisTaskDataRequest, options: List[Callable] = None) -> pb.DescribeTagAnalysisTaskDataResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagAnalysisTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTagAnalysisTaskData', 'DescribeTagAnalysisTaskData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTagAnalysisTaskData(self, ctx: context.Context, request: pb.DescribeTagAnalysisTaskDataRequest, options: List[Callable] = None) -> pb.DescribeTagAnalysisTaskDataResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagAnalysisTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTagAnalysisTaskData', 'DescribeTagAnalysisTaskData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeTagFiles(self, ctx: context.Context, request: pb.DescribeTagFilesRequest, options: List[Callable] = None) -> pb.DescribeTagFilesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagFilesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTagFiles', 'DescribeTagFiles')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeTagFiles(self, ctx: context.Context, request: pb.DescribeTagFilesRequest, options: List[Callable] = None) -> pb.DescribeTagFilesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeTagFilesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeTagFiles', 'DescribeTagFiles')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DeleteTagFiles(self, ctx: context.Context, request: pb.DeleteTagFilesRequest, options: List[Callable] = None) -> pb.DeleteTagFilesResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteTagFilesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteTagFiles', 'DeleteTagFiles')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDeleteTagFiles(self, ctx: context.Context, request: pb.DeleteTagFilesRequest, options: List[Callable] = None) -> pb.DeleteTagFilesResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DeleteTagFilesResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DeleteTagFiles', 'DeleteTagFiles')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def GetTagFileUrl(self, ctx: context.Context, request: pb.TagFileUrlRequest, options: List[Callable] = None) -> pb.TagFileUrlResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.TagFileUrlResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/GetTagFileUrl', 'GetTagFileUrl')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncGetTagFileUrl(self, ctx: context.Context, request: pb.TagFileUrlRequest, options: List[Callable] = None) -> pb.TagFileUrlResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.TagFileUrlResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/GetTagFileUrl', 'GetTagFileUrl')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    