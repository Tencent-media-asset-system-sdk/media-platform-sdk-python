# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: video_erase.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# RemoveLogoService defines service
class RemoveLogoServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateRemoveLogoTask(self, ctx: context.Context, request: pb.CreateRemoveLogoTaskRequest) -> pb.CreateRemoveLogoTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeRemoveLogoTaskData(self, ctx: context.Context, request: pb.DescribeRemoveLogoTaskDataRequest) -> pb.DescribeRemoveLogoTaskDataResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

RemoveLogoServiceName = "trpc.media.videoerase.RemoveLogo"  # pylint: disable=invalid-name

# add RemoveLogoServicer to server
# pylint: disable=invalid-name
def register_RemoveLogoServicer_server(svr: server.Server, servicer: RemoveLogoServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateRemoveLogoTask",
            req_cls=pb.CreateRemoveLogoTaskRequest,
            rsp_cls=pb.CreateRemoveLogoTaskResponse,
            impl_func=servicer.CreateRemoveLogoTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeRemoveLogoTaskData",
            req_cls=pb.DescribeRemoveLogoTaskDataRequest,
            rsp_cls=pb.DescribeRemoveLogoTaskDataResponse,
            impl_func=servicer.DescribeRemoveLogoTaskData))
    
    desc = server.ServiceDesc(
        service_name="/" + RemoveLogoServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class RemoveLogoClientProxy:
    """Client proxy"""
    
    def CreateRemoveLogoTask(self, ctx: context.Context, request: pb.CreateRemoveLogoTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveLogoTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateRemoveLogoTask(self, ctx: context.Context, request: pb.CreateRemoveLogoTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveLogoTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeRemoveLogoTaskData(self, ctx: context.Context, request: pb.DescribeRemoveLogoTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveLogoTaskDataResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeRemoveLogoTaskData(self, ctx: context.Context, request: pb.DescribeRemoveLogoTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveLogoTaskDataResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class RemoveLogoClientProxyImpl(RemoveLogoClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(RemoveLogoServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateRemoveLogoTask(self, ctx: context.Context, request: pb.CreateRemoveLogoTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveLogoTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateRemoveLogoTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateRemoveLogoTask', 'CreateRemoveLogoTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateRemoveLogoTask(self, ctx: context.Context, request: pb.CreateRemoveLogoTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveLogoTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateRemoveLogoTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateRemoveLogoTask', 'CreateRemoveLogoTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeRemoveLogoTaskData(self, ctx: context.Context, request: pb.DescribeRemoveLogoTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveLogoTaskDataResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeRemoveLogoTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeRemoveLogoTaskData', 'DescribeRemoveLogoTaskData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeRemoveLogoTaskData(self, ctx: context.Context, request: pb.DescribeRemoveLogoTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveLogoTaskDataResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeRemoveLogoTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeRemoveLogoTaskData', 'DescribeRemoveLogoTaskData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
# RemoveCaptionService defines service
class RemoveCaptionServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def CreateRemoveCaptionTask(self, ctx: context.Context, request: pb.CreateRemoveCaptionTaskRequest) -> pb.CreateRemoveCaptionTaskResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')
    #pylint: disable=invalid-name
    async def DescribeRemoveCaptionTaskData(self, ctx: context.Context, request: pb.DescribeRemoveCaptionTaskDataRequest) -> pb.DescribeRemoveCaptionTaskDataResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

RemoveCaptionServiceName = "trpc.media.videoerase.RemoveCaption"  # pylint: disable=invalid-name

# add RemoveCaptionServicer to server
# pylint: disable=invalid-name
def register_RemoveCaptionServicer_server(svr: server.Server, servicer: RemoveCaptionServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/CreateRemoveCaptionTask",
            req_cls=pb.CreateRemoveCaptionTaskRequest,
            rsp_cls=pb.CreateRemoveCaptionTaskResponse,
            impl_func=servicer.CreateRemoveCaptionTask))
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeRemoveCaptionTaskData",
            req_cls=pb.DescribeRemoveCaptionTaskDataRequest,
            rsp_cls=pb.DescribeRemoveCaptionTaskDataResponse,
            impl_func=servicer.DescribeRemoveCaptionTaskData))
    
    desc = server.ServiceDesc(
        service_name="/" + RemoveCaptionServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class RemoveCaptionClientProxy:
    """Client proxy"""
    
    def CreateRemoveCaptionTask(self, ctx: context.Context, request: pb.CreateRemoveCaptionTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveCaptionTaskResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncCreateRemoveCaptionTask(self, ctx: context.Context, request: pb.CreateRemoveCaptionTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveCaptionTaskResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    
    def DescribeRemoveCaptionTaskData(self, ctx: context.Context, request: pb.DescribeRemoveCaptionTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveCaptionTaskDataResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeRemoveCaptionTaskData(self, ctx: context.Context, request: pb.DescribeRemoveCaptionTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveCaptionTaskDataResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class RemoveCaptionClientProxyImpl(RemoveCaptionClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(RemoveCaptionServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def CreateRemoveCaptionTask(self, ctx: context.Context, request: pb.CreateRemoveCaptionTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveCaptionTaskResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateRemoveCaptionTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateRemoveCaptionTask', 'CreateRemoveCaptionTask')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncCreateRemoveCaptionTask(self, ctx: context.Context, request: pb.CreateRemoveCaptionTaskRequest, options: List[Callable] = None) -> pb.CreateRemoveCaptionTaskResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.CreateRemoveCaptionTaskResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/CreateRemoveCaptionTask', 'CreateRemoveCaptionTask')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    
    def DescribeRemoveCaptionTaskData(self, ctx: context.Context, request: pb.DescribeRemoveCaptionTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveCaptionTaskDataResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeRemoveCaptionTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeRemoveCaptionTaskData', 'DescribeRemoveCaptionTaskData')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeRemoveCaptionTaskData(self, ctx: context.Context, request: pb.DescribeRemoveCaptionTaskDataRequest, options: List[Callable] = None) -> pb.DescribeRemoveCaptionTaskDataResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeRemoveCaptionTaskDataResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeRemoveCaptionTaskData', 'DescribeRemoveCaptionTaskData')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    