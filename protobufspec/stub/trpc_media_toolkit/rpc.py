# -*- coding: utf-8 -*-
"""This is RPC module
Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
Source: toolkit.proto
"""
from typing import List, Callable, Tuple

from trpc import client
from trpc import codec
from trpc import server
from trpc import context
from trpc.codec.message import Message
from . import pb

#pylint: disable=unnecessary-pass


# ToolkitService defines service
class ToolkitServicer:
    """Abstract base class of server"""
    
    #pylint: disable=invalid-name
    async def DescribeToolkits(self, ctx: context.Context, request: pb.DescribeToolkitsRequest) -> pb.DescribeToolkitsResponse:
        """Abstract rpc method of server
        :param ctx: context of data processing.
        :param request: object of pb.
        """
        raise NotImplementedError('Method not implemented!')

ToolkitServiceName = "trpc.media.toolkit.Toolkit"  # pylint: disable=invalid-name

# add ToolkitServicer to server
# pylint: disable=invalid-name
def register_ToolkitServicer_server(svr: server.Server, servicer: ToolkitServicer, fix_rpc_name: bool = False):
    """Register service to server"""
    rpc_method_handlers = []
    rpc_stream_handlers = []
    
    rpc_method_handlers.append(
        server.Method(
            name="/DescribeToolkits",
            req_cls=pb.DescribeToolkitsRequest,
            rsp_cls=pb.DescribeToolkitsResponse,
            impl_func=servicer.DescribeToolkits))
    
    desc = server.ServiceDesc(
        service_name="/" + ToolkitServiceName,
        methods=rpc_method_handlers)

    svr.register(desc, fix_rpc_name)


# client proxy
class ToolkitClientProxy:
    """Client proxy"""
    
    def DescribeToolkits(self, ctx: context.Context, request: pb.DescribeToolkitsRequest, options: List[Callable] = None) -> pb.DescribeToolkitsResponse:
        """Client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass

    async def asyncDescribeToolkits(self, ctx: context.Context, request: pb.DescribeToolkitsRequest, options: List[Callable] = None) -> pb.DescribeToolkitsResponse:
        """Async client stream method
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of rsp pb
        """
        pass
    

class ToolkitClientProxyImpl(ToolkitClientProxy):
    """Client proxy implementation"""
    def __init__(self, service_name: str = None, fix_rpc_name: bool = True):
        self.client = client.get_client()
        self.options = {}

    @staticmethod
    def _clone_client_message(ctx: context.Context, rpc_name: str, callee_method: str) -> Tuple[context.Context, Message]:
        """Clone client message
        :param ctx: context of data processing.
        :param rpc_name: name of rpc.
        :param callee_method: method of callee
        :return: tuple
        """
        ctx, msg = codec.clone_client_message(ctx)
        msg.set_client_rpc_name(rpc_name)
        msg.set_callee_service_name(ToolkitServiceName)
        msg.set_callee_method(callee_method)
        return ctx, msg

    
    def DescribeToolkits(self, ctx: context.Context, request: pb.DescribeToolkitsRequest, options: List[Callable] = None) -> pb.DescribeToolkitsResponse:
        """Client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeToolkitsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeToolkits', 'DescribeToolkits')
        return self.client.invoke_sync(ctx, request, rsp_cls, options)

    async def asyncDescribeToolkits(self, ctx: context.Context, request: pb.DescribeToolkitsRequest, options: List[Callable] = None) -> pb.DescribeToolkitsResponse:
        """Async client rpc method implementation
        :param ctx: context of data processing.
        :param request: object of pb.
        :param options: list of setting functions
        :return: object of pb
        """
        rsp_cls = pb.DescribeToolkitsResponse
        options = options or []

        ctx, msg = self._clone_client_message(ctx, '/DescribeToolkits', 'DescribeToolkits')
        rsp = await self.client.invoke(ctx, request, rsp_cls, options)
        return rsp
    